// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.ledClient.generated;

// <auto-generated>
//
// Generated from file `tgcs_base.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


@SuppressWarnings("serial")
public class Text implements java.lang.Cloneable, java.io.Serializable
{
    public int textNo;

    public TArea area;

    public String content;

    public EHorizontalAlign hAlign;

    public EVerticalAlign vAlign;

    public EPlayStyle playStyle;

    public int playSpeed;

    public EPlayStyle exitStyle;

    public int playTime;

    public int playTimes;

    public String fontName;

    public int fontSize;

    public int fontColor;

    public int bold;

    public int italic;

    public int underline;

    public EMidTextStyle midTextStyle;

    public int lineSpacing;

    public Text()
    {
    }

    public Text(int textNo, TArea area, String content, EHorizontalAlign hAlign, EVerticalAlign vAlign, EPlayStyle playStyle, int playSpeed, EPlayStyle exitStyle, int playTime, int playTimes, String fontName, int fontSize, int fontColor, int bold, int italic, int underline, EMidTextStyle midTextStyle, int lineSpacing)
    {
        this.textNo = textNo;
        this.area = area;
        this.content = content;
        this.hAlign = hAlign;
        this.vAlign = vAlign;
        this.playStyle = playStyle;
        this.playSpeed = playSpeed;
        this.exitStyle = exitStyle;
        this.playTime = playTime;
        this.playTimes = playTimes;
        this.fontName = fontName;
        this.fontSize = fontSize;
        this.fontColor = fontColor;
        this.bold = bold;
        this.italic = italic;
        this.underline = underline;
        this.midTextStyle = midTextStyle;
        this.lineSpacing = lineSpacing;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Text _r = null;
        try
        {
            _r = (Text)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(textNo != _r.textNo)
            {
                return false;
            }
            if(area != _r.area && area != null && !area.equals(_r.area))
            {
                return false;
            }
            if(content != _r.content && content != null && !content.equals(_r.content))
            {
                return false;
            }
            if(hAlign != _r.hAlign && hAlign != null && !hAlign.equals(_r.hAlign))
            {
                return false;
            }
            if(vAlign != _r.vAlign && vAlign != null && !vAlign.equals(_r.vAlign))
            {
                return false;
            }
            if(playStyle != _r.playStyle && playStyle != null && !playStyle.equals(_r.playStyle))
            {
                return false;
            }
            if(playSpeed != _r.playSpeed)
            {
                return false;
            }
            if(exitStyle != _r.exitStyle && exitStyle != null && !exitStyle.equals(_r.exitStyle))
            {
                return false;
            }
            if(playTime != _r.playTime)
            {
                return false;
            }
            if(playTimes != _r.playTimes)
            {
                return false;
            }
            if(fontName != _r.fontName && fontName != null && !fontName.equals(_r.fontName))
            {
                return false;
            }
            if(fontSize != _r.fontSize)
            {
                return false;
            }
            if(fontColor != _r.fontColor)
            {
                return false;
            }
            if(bold != _r.bold)
            {
                return false;
            }
            if(italic != _r.italic)
            {
                return false;
            }
            if(underline != _r.underline)
            {
                return false;
            }
            if(midTextStyle != _r.midTextStyle && midTextStyle != null && !midTextStyle.equals(_r.midTextStyle))
            {
                return false;
            }
            if(lineSpacing != _r.lineSpacing)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        __h = 5 * __h + textNo;
        if(area != null)
        {
            __h = 5 * __h + area.hashCode();
        }
        if(content != null)
        {
            __h = 5 * __h + content.hashCode();
        }
        if(hAlign != null)
        {
            __h = 5 * __h + hAlign.hashCode();
        }
        if(vAlign != null)
        {
            __h = 5 * __h + vAlign.hashCode();
        }
        if(playStyle != null)
        {
            __h = 5 * __h + playStyle.hashCode();
        }
        __h = 5 * __h + playSpeed;
        if(exitStyle != null)
        {
            __h = 5 * __h + exitStyle.hashCode();
        }
        __h = 5 * __h + playTime;
        __h = 5 * __h + playTimes;
        if(fontName != null)
        {
            __h = 5 * __h + fontName.hashCode();
        }
        __h = 5 * __h + fontSize;
        __h = 5 * __h + fontColor;
        __h = 5 * __h + bold;
        __h = 5 * __h + italic;
        __h = 5 * __h + underline;
        if(midTextStyle != null)
        {
            __h = 5 * __h + midTextStyle.hashCode();
        }
        __h = 5 * __h + lineSpacing;
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(textNo);
        area.__write(__os);
        __os.writeString(content);
        hAlign.__write(__os);
        vAlign.__write(__os);
        playStyle.__write(__os);
        __os.writeInt(playSpeed);
        exitStyle.__write(__os);
        __os.writeInt(playTime);
        __os.writeInt(playTimes);
        __os.writeString(fontName);
        __os.writeInt(fontSize);
        __os.writeInt(fontColor);
        __os.writeInt(bold);
        __os.writeInt(italic);
        __os.writeInt(underline);
        midTextStyle.__write(__os);
        __os.writeInt(lineSpacing);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        textNo = __is.readInt();
        area = new TArea();
        area.__read(__is);
        content = __is.readString();
        hAlign = EHorizontalAlign.__read(__is);
        vAlign = EVerticalAlign.__read(__is);
        playStyle = EPlayStyle.__read(__is);
        playSpeed = __is.readInt();
        exitStyle = EPlayStyle.__read(__is);
        playTime = __is.readInt();
        playTimes = __is.readInt();
        fontName = __is.readString();
        fontSize = __is.readInt();
        fontColor = __is.readInt();
        bold = __is.readInt();
        italic = __is.readInt();
        underline = __is.readInt();
        midTextStyle = EMidTextStyle.__read(__is);
        lineSpacing = __is.readInt();
    }
}
