// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.ledClient.generated;

// <auto-generated>
//
// Generated from file `tgcs_interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


@SuppressWarnings("serial")
public abstract class _TgcsInterfaceDisp extends Ice.ObjectImpl implements TgcsInterface
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::TgcsIce::TgcsInterface"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    public final void
    AddDevice_async(AMD_TgcsInterface_AddDevice __cb, DeviceInfo[] listDev)
    {
        AddDevice_async(__cb, listDev, null);
    }

    public final void
    AddProgram_async(AMD_TgcsInterface_AddProgram __cb, DeviceInfo devInfo, Program prog)
    {
        AddProgram_async(__cb, devInfo, prog, null);
    }

    public final void
    ClearProgram_async(AMD_TgcsInterface_ClearProgram __cb, DeviceInfo devInfo)
    {
        ClearProgram_async(__cb, devInfo, null);
    }

    public final void
    DeleteDevice_async(AMD_TgcsInterface_DeleteDevice __cb, DeviceInfo[] listDev)
    {
        DeleteDevice_async(__cb, listDev, null);
    }

    public final void
    DeleteProgram_async(AMD_TgcsInterface_DeleteProgram __cb, DeviceInfo devInfo, int programNo)
    {
        DeleteProgram_async(__cb, devInfo, programNo, null);
    }

    public final void
    ExcludeProgram_async(AMD_TgcsInterface_ExcludeProgram __cb, DeviceInfo devInfo, Program prog)
    {
        ExcludeProgram_async(__cb, devInfo, prog, null);
    }

    public final void
    GetDevice_async(AMD_TgcsInterface_GetDevice __cb)
    {
        GetDevice_async(__cb, null);
    }

    public final void
    GetLedError_async(AMD_TgcsInterface_GetLedError __cb, DeviceInfo devInfo)
    {
        GetLedError_async(__cb, devInfo, null);
    }

    public final void
    GetOnlineStatus_async(AMD_TgcsInterface_GetOnlineStatus __cb, DeviceInfo devInfo)
    {
        GetOnlineStatus_async(__cb, devInfo, null);
    }

    public final void
    GetPlayingProgram_async(AMD_TgcsInterface_GetPlayingProgram __cb, DeviceInfo devInfo)
    {
        GetPlayingProgram_async(__cb, devInfo, null);
    }

    public final void
    GetPrograms_async(AMD_TgcsInterface_GetPrograms __cb, DeviceInfo devInfo)
    {
        GetPrograms_async(__cb, devInfo, null);
    }

    public final void
    GetScreenStatus_async(AMD_TgcsInterface_GetScreenStatus __cb, DeviceInfo devInfo)
    {
        GetScreenStatus_async(__cb, devInfo, null);
    }

    public final void
    ModifyDevice_async(AMD_TgcsInterface_ModifyDevice __cb, DeviceInfo[] listDev)
    {
        ModifyDevice_async(__cb, listDev, null);
    }

    public final void
    ModifyProgram_async(AMD_TgcsInterface_ModifyProgram __cb, DeviceInfo devInfo, Program prog)
    {
        ModifyProgram_async(__cb, devInfo, prog, null);
    }

    public final void
    SetLedBrightness_async(AMD_TgcsInterface_SetLedBrightness __cb, DeviceInfo devInfo, int brightness)
    {
        SetLedBrightness_async(__cb, devInfo, brightness, null);
    }

    public final void
    SetLedBrightnessTimed_async(AMD_TgcsInterface_SetLedBrightnessTimed __cb, DeviceInfo devInfo, BrightnessGroup[] listBrightness)
    {
        SetLedBrightnessTimed_async(__cb, devInfo, listBrightness, null);
    }

    public final void
    SetLedPower_async(AMD_TgcsInterface_SetLedPower __cb, DeviceInfo devInfo, int power)
    {
        SetLedPower_async(__cb, devInfo, power, null);
    }

    public final void
    SetLedPowerTimed_async(AMD_TgcsInterface_SetLedPowerTimed __cb, DeviceInfo devInfo, PowerGroup[] listPower)
    {
        SetLedPowerTimed_async(__cb, devInfo, listPower, null);
    }

    public final void
    SyncLedTime_async(AMD_TgcsInterface_SyncLedTime __cb, DeviceInfo devInfo)
    {
        SyncLedTime_async(__cb, devInfo, null);
    }

    public static Ice.DispatchStatus
    ___GetOnlineStatus(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_GetOnlineStatus __cb = new _AMD_TgcsInterface_GetOnlineStatus(__inS);
        try
        {
            __obj.GetOnlineStatus_async(__cb, devInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___GetScreenStatus(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_GetScreenStatus __cb = new _AMD_TgcsInterface_GetScreenStatus(__inS);
        try
        {
            __obj.GetScreenStatus_async(__cb, devInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___GetLedError(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_GetLedError __cb = new _AMD_TgcsInterface_GetLedError(__inS);
        try
        {
            __obj.GetLedError_async(__cb, devInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___SetLedPower(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        int power;
        power = __is.readInt();
        __is.endReadEncaps();
        AMD_TgcsInterface_SetLedPower __cb = new _AMD_TgcsInterface_SetLedPower(__inS);
        try
        {
            __obj.SetLedPower_async(__cb, devInfo, power, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___SetLedPowerTimed(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        PowerGroup[] listPower;
        listPower = PowerGroupListHelper.read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_SetLedPowerTimed __cb = new _AMD_TgcsInterface_SetLedPowerTimed(__inS);
        try
        {
            __obj.SetLedPowerTimed_async(__cb, devInfo, listPower, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___SetLedBrightness(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        int brightness;
        brightness = __is.readInt();
        __is.endReadEncaps();
        AMD_TgcsInterface_SetLedBrightness __cb = new _AMD_TgcsInterface_SetLedBrightness(__inS);
        try
        {
            __obj.SetLedBrightness_async(__cb, devInfo, brightness, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___SetLedBrightnessTimed(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        BrightnessGroup[] listBrightness;
        listBrightness = BrightnessGroupListHelper.read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_SetLedBrightnessTimed __cb = new _AMD_TgcsInterface_SetLedBrightnessTimed(__inS);
        try
        {
            __obj.SetLedBrightnessTimed_async(__cb, devInfo, listBrightness, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___SyncLedTime(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_SyncLedTime __cb = new _AMD_TgcsInterface_SyncLedTime(__inS);
        try
        {
            __obj.SyncLedTime_async(__cb, devInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___AddProgram(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        Program prog;
        prog = new Program();
        prog.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_AddProgram __cb = new _AMD_TgcsInterface_AddProgram(__inS);
        try
        {
            __obj.AddProgram_async(__cb, devInfo, prog, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___GetPlayingProgram(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_GetPlayingProgram __cb = new _AMD_TgcsInterface_GetPlayingProgram(__inS);
        try
        {
            __obj.GetPlayingProgram_async(__cb, devInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___ModifyProgram(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        Program prog;
        prog = new Program();
        prog.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_ModifyProgram __cb = new _AMD_TgcsInterface_ModifyProgram(__inS);
        try
        {
            __obj.ModifyProgram_async(__cb, devInfo, prog, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___DeleteProgram(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        int programNo;
        programNo = __is.readInt();
        __is.endReadEncaps();
        AMD_TgcsInterface_DeleteProgram __cb = new _AMD_TgcsInterface_DeleteProgram(__inS);
        try
        {
            __obj.DeleteProgram_async(__cb, devInfo, programNo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___GetPrograms(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_GetPrograms __cb = new _AMD_TgcsInterface_GetPrograms(__inS);
        try
        {
            __obj.GetPrograms_async(__cb, devInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___ClearProgram(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_ClearProgram __cb = new _AMD_TgcsInterface_ClearProgram(__inS);
        try
        {
            __obj.ClearProgram_async(__cb, devInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___ExcludeProgram(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo devInfo;
        devInfo = new DeviceInfo();
        devInfo.__read(__is);
        Program prog;
        prog = new Program();
        prog.__read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_ExcludeProgram __cb = new _AMD_TgcsInterface_ExcludeProgram(__inS);
        try
        {
            __obj.ExcludeProgram_async(__cb, devInfo, prog, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___AddDevice(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo[] listDev;
        listDev = DeviceInfoListHelper.read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_AddDevice __cb = new _AMD_TgcsInterface_AddDevice(__inS);
        try
        {
            __obj.AddDevice_async(__cb, listDev, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___ModifyDevice(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo[] listDev;
        listDev = DeviceInfoListHelper.read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_ModifyDevice __cb = new _AMD_TgcsInterface_ModifyDevice(__inS);
        try
        {
            __obj.ModifyDevice_async(__cb, listDev, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___DeleteDevice(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        DeviceInfo[] listDev;
        listDev = DeviceInfoListHelper.read(__is);
        __is.endReadEncaps();
        AMD_TgcsInterface_DeleteDevice __cb = new _AMD_TgcsInterface_DeleteDevice(__inS);
        try
        {
            __obj.DeleteDevice_async(__cb, listDev, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___GetDevice(TgcsInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_TgcsInterface_GetDevice __cb = new _AMD_TgcsInterface_GetDevice(__inS);
        try
        {
            __obj.GetDevice_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "AddDevice",
        "AddProgram",
        "ClearProgram",
        "DeleteDevice",
        "DeleteProgram",
        "ExcludeProgram",
        "GetDevice",
        "GetLedError",
        "GetOnlineStatus",
        "GetPlayingProgram",
        "GetPrograms",
        "GetScreenStatus",
        "ModifyDevice",
        "ModifyProgram",
        "SetLedBrightness",
        "SetLedBrightnessTimed",
        "SetLedPower",
        "SetLedPowerTimed",
        "SyncLedTime",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___AddDevice(this, in, __current);
            }
            case 1:
            {
                return ___AddProgram(this, in, __current);
            }
            case 2:
            {
                return ___ClearProgram(this, in, __current);
            }
            case 3:
            {
                return ___DeleteDevice(this, in, __current);
            }
            case 4:
            {
                return ___DeleteProgram(this, in, __current);
            }
            case 5:
            {
                return ___ExcludeProgram(this, in, __current);
            }
            case 6:
            {
                return ___GetDevice(this, in, __current);
            }
            case 7:
            {
                return ___GetLedError(this, in, __current);
            }
            case 8:
            {
                return ___GetOnlineStatus(this, in, __current);
            }
            case 9:
            {
                return ___GetPlayingProgram(this, in, __current);
            }
            case 10:
            {
                return ___GetPrograms(this, in, __current);
            }
            case 11:
            {
                return ___GetScreenStatus(this, in, __current);
            }
            case 12:
            {
                return ___ModifyDevice(this, in, __current);
            }
            case 13:
            {
                return ___ModifyProgram(this, in, __current);
            }
            case 14:
            {
                return ___SetLedBrightness(this, in, __current);
            }
            case 15:
            {
                return ___SetLedBrightnessTimed(this, in, __current);
            }
            case 16:
            {
                return ___SetLedPower(this, in, __current);
            }
            case 17:
            {
                return ___SetLedPowerTimed(this, in, __current);
            }
            case 18:
            {
                return ___SyncLedTime(this, in, __current);
            }
            case 19:
            {
                return ___ice_id(this, in, __current);
            }
            case 20:
            {
                return ___ice_ids(this, in, __current);
            }
            case 21:
            {
                return ___ice_isA(this, in, __current);
            }
            case 22:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type TgcsIce::TgcsInterface was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type TgcsIce::TgcsInterface was not generated with stream support";
        throw ex;
    }
}
