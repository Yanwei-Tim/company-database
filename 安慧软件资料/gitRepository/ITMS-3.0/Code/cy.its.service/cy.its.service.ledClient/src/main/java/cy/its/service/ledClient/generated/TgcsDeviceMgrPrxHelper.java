// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.ledClient.generated;

// <auto-generated>
//
// Generated from file `tgcs_device_mgr.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


@SuppressWarnings("serial")
public final class TgcsDeviceMgrPrxHelper extends Ice.ObjectPrxHelperBase implements TgcsDeviceMgrPrx
{
    public int
    AddDevice(TgcsDevice[] listDev)
    {
        return AddDevice(listDev, null, false);
    }

    public int
    AddDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        return AddDevice(listDev, __ctx, true);
    }

    private int
    AddDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("AddDevice");
                __delBase = __getDelegate(false);
                _TgcsDeviceMgrDel __del = (_TgcsDeviceMgrDel)__delBase;
                return __del.AddDevice(listDev, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __AddDevice_name = "AddDevice";

    public Ice.AsyncResult begin_AddDevice(TgcsDevice[] listDev)
    {
        return begin_AddDevice(listDev, null, false, null);
    }

    public Ice.AsyncResult begin_AddDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        return begin_AddDevice(listDev, __ctx, true, null);
    }

    public Ice.AsyncResult begin_AddDevice(TgcsDevice[] listDev, Ice.Callback __cb)
    {
        return begin_AddDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_AddDevice(listDev, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_AddDevice(TgcsDevice[] listDev, Callback_TgcsDeviceMgr_AddDevice __cb)
    {
        return begin_AddDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, Callback_TgcsDeviceMgr_AddDevice __cb)
    {
        return begin_AddDevice(listDev, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_AddDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__AddDevice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __AddDevice_name, __cb);
        try
        {
            __result.__prepare(__AddDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            TgcsDeviceListHelper.write(__os, listDev);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_AddDevice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __AddDevice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    AddDevice_async(AMI_TgcsDeviceMgr_AddDevice __cb, TgcsDevice[] listDev)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__AddDevice_name);
            __r = begin_AddDevice(listDev, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __AddDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    AddDevice_async(AMI_TgcsDeviceMgr_AddDevice __cb, TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__AddDevice_name);
            __r = begin_AddDevice(listDev, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __AddDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    DeleteDevice(TgcsDevice[] listDev)
    {
        return DeleteDevice(listDev, null, false);
    }

    public int
    DeleteDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        return DeleteDevice(listDev, __ctx, true);
    }

    private int
    DeleteDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("DeleteDevice");
                __delBase = __getDelegate(false);
                _TgcsDeviceMgrDel __del = (_TgcsDeviceMgrDel)__delBase;
                return __del.DeleteDevice(listDev, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __DeleteDevice_name = "DeleteDevice";

    public Ice.AsyncResult begin_DeleteDevice(TgcsDevice[] listDev)
    {
        return begin_DeleteDevice(listDev, null, false, null);
    }

    public Ice.AsyncResult begin_DeleteDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        return begin_DeleteDevice(listDev, __ctx, true, null);
    }

    public Ice.AsyncResult begin_DeleteDevice(TgcsDevice[] listDev, Ice.Callback __cb)
    {
        return begin_DeleteDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DeleteDevice(listDev, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_DeleteDevice(TgcsDevice[] listDev, Callback_TgcsDeviceMgr_DeleteDevice __cb)
    {
        return begin_DeleteDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, Callback_TgcsDeviceMgr_DeleteDevice __cb)
    {
        return begin_DeleteDevice(listDev, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_DeleteDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DeleteDevice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __DeleteDevice_name, __cb);
        try
        {
            __result.__prepare(__DeleteDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            TgcsDeviceListHelper.write(__os, listDev);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_DeleteDevice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __DeleteDevice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    DeleteDevice_async(AMI_TgcsDeviceMgr_DeleteDevice __cb, TgcsDevice[] listDev)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__DeleteDevice_name);
            __r = begin_DeleteDevice(listDev, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __DeleteDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    DeleteDevice_async(AMI_TgcsDeviceMgr_DeleteDevice __cb, TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__DeleteDevice_name);
            __r = begin_DeleteDevice(listDev, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __DeleteDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public TgcsDevice[]
    GetDevices()
    {
        return GetDevices(null, false);
    }

    public TgcsDevice[]
    GetDevices(java.util.Map<String, String> __ctx)
    {
        return GetDevices(__ctx, true);
    }

    private TgcsDevice[]
    GetDevices(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("GetDevices");
                __delBase = __getDelegate(false);
                _TgcsDeviceMgrDel __del = (_TgcsDeviceMgrDel)__delBase;
                return __del.GetDevices(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __GetDevices_name = "GetDevices";

    public Ice.AsyncResult begin_GetDevices()
    {
        return begin_GetDevices(null, false, null);
    }

    public Ice.AsyncResult begin_GetDevices(java.util.Map<String, String> __ctx)
    {
        return begin_GetDevices(__ctx, true, null);
    }

    public Ice.AsyncResult begin_GetDevices(Ice.Callback __cb)
    {
        return begin_GetDevices(null, false, __cb);
    }

    public Ice.AsyncResult begin_GetDevices(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetDevices(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_GetDevices(Callback_TgcsDeviceMgr_GetDevices __cb)
    {
        return begin_GetDevices(null, false, __cb);
    }

    public Ice.AsyncResult begin_GetDevices(java.util.Map<String, String> __ctx, Callback_TgcsDeviceMgr_GetDevices __cb)
    {
        return begin_GetDevices(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_GetDevices(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetDevices_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __GetDevices_name, __cb);
        try
        {
            __result.__prepare(__GetDevices_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public TgcsDevice[] end_GetDevices(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __GetDevices_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        TgcsDevice[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TgcsDeviceListHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    GetDevices_async(AMI_TgcsDeviceMgr_GetDevices __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetDevices_name);
            __r = begin_GetDevices(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetDevices_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    GetDevices_async(AMI_TgcsDeviceMgr_GetDevices __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetDevices_name);
            __r = begin_GetDevices(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetDevices_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    ModifyDevice(TgcsDevice[] listDev)
    {
        return ModifyDevice(listDev, null, false);
    }

    public int
    ModifyDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        return ModifyDevice(listDev, __ctx, true);
    }

    private int
    ModifyDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ModifyDevice");
                __delBase = __getDelegate(false);
                _TgcsDeviceMgrDel __del = (_TgcsDeviceMgrDel)__delBase;
                return __del.ModifyDevice(listDev, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __ModifyDevice_name = "ModifyDevice";

    public Ice.AsyncResult begin_ModifyDevice(TgcsDevice[] listDev)
    {
        return begin_ModifyDevice(listDev, null, false, null);
    }

    public Ice.AsyncResult begin_ModifyDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        return begin_ModifyDevice(listDev, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ModifyDevice(TgcsDevice[] listDev, Ice.Callback __cb)
    {
        return begin_ModifyDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_ModifyDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ModifyDevice(listDev, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ModifyDevice(TgcsDevice[] listDev, Callback_TgcsDeviceMgr_ModifyDevice __cb)
    {
        return begin_ModifyDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_ModifyDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, Callback_TgcsDeviceMgr_ModifyDevice __cb)
    {
        return begin_ModifyDevice(listDev, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ModifyDevice(TgcsDevice[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ModifyDevice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ModifyDevice_name, __cb);
        try
        {
            __result.__prepare(__ModifyDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            TgcsDeviceListHelper.write(__os, listDev);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_ModifyDevice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ModifyDevice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    ModifyDevice_async(AMI_TgcsDeviceMgr_ModifyDevice __cb, TgcsDevice[] listDev)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ModifyDevice_name);
            __r = begin_ModifyDevice(listDev, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ModifyDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    ModifyDevice_async(AMI_TgcsDeviceMgr_ModifyDevice __cb, TgcsDevice[] listDev, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ModifyDevice_name);
            __r = begin_ModifyDevice(listDev, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ModifyDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static TgcsDeviceMgrPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        TgcsDeviceMgrPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TgcsDeviceMgrPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::TgcsIce::TgcsDeviceMgr"))
                {
                    TgcsDeviceMgrPrxHelper __h = new TgcsDeviceMgrPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TgcsDeviceMgrPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TgcsDeviceMgrPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TgcsDeviceMgrPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::TgcsIce::TgcsDeviceMgr", __ctx))
                {
                    TgcsDeviceMgrPrxHelper __h = new TgcsDeviceMgrPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TgcsDeviceMgrPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TgcsDeviceMgrPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::TgcsIce::TgcsDeviceMgr"))
                {
                    TgcsDeviceMgrPrxHelper __h = new TgcsDeviceMgrPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TgcsDeviceMgrPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TgcsDeviceMgrPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::TgcsIce::TgcsDeviceMgr", __ctx))
                {
                    TgcsDeviceMgrPrxHelper __h = new TgcsDeviceMgrPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TgcsDeviceMgrPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        TgcsDeviceMgrPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TgcsDeviceMgrPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                TgcsDeviceMgrPrxHelper __h = new TgcsDeviceMgrPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TgcsDeviceMgrPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TgcsDeviceMgrPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TgcsDeviceMgrPrxHelper __h = new TgcsDeviceMgrPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _TgcsDeviceMgrDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _TgcsDeviceMgrDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, TgcsDeviceMgrPrx v)
    {
        __os.writeProxy(v);
    }

    public static TgcsDeviceMgrPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TgcsDeviceMgrPrxHelper result = new TgcsDeviceMgrPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
