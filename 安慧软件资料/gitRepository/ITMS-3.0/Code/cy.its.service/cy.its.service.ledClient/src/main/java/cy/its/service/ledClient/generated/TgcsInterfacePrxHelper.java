// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.ledClient.generated;

// <auto-generated>
//
// Generated from file `tgcs_interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


@SuppressWarnings("serial")
public final class TgcsInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements TgcsInterfacePrx
{
    public int
    AddDevice(DeviceInfo[] listDev)
    {
        return AddDevice(listDev, null, false);
    }

    public int
    AddDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        return AddDevice(listDev, __ctx, true);
    }

    private int
    AddDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("AddDevice");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.AddDevice(listDev, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __AddDevice_name = "AddDevice";

    public Ice.AsyncResult begin_AddDevice(DeviceInfo[] listDev)
    {
        return begin_AddDevice(listDev, null, false, null);
    }

    public Ice.AsyncResult begin_AddDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        return begin_AddDevice(listDev, __ctx, true, null);
    }

    public Ice.AsyncResult begin_AddDevice(DeviceInfo[] listDev, Ice.Callback __cb)
    {
        return begin_AddDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_AddDevice(listDev, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_AddDevice(DeviceInfo[] listDev, Callback_TgcsInterface_AddDevice __cb)
    {
        return begin_AddDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, Callback_TgcsInterface_AddDevice __cb)
    {
        return begin_AddDevice(listDev, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_AddDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__AddDevice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __AddDevice_name, __cb);
        try
        {
            __result.__prepare(__AddDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            DeviceInfoListHelper.write(__os, listDev);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_AddDevice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __AddDevice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    AddDevice_async(AMI_TgcsInterface_AddDevice __cb, DeviceInfo[] listDev)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__AddDevice_name);
            __r = begin_AddDevice(listDev, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __AddDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    AddDevice_async(AMI_TgcsInterface_AddDevice __cb, DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__AddDevice_name);
            __r = begin_AddDevice(listDev, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __AddDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ProgramResponse
    AddProgram(DeviceInfo devInfo, Program prog)
    {
        return AddProgram(devInfo, prog, null, false);
    }

    public ProgramResponse
    AddProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        return AddProgram(devInfo, prog, __ctx, true);
    }

    private ProgramResponse
    AddProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("AddProgram");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.AddProgram(devInfo, prog, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __AddProgram_name = "AddProgram";

    public Ice.AsyncResult begin_AddProgram(DeviceInfo devInfo, Program prog)
    {
        return begin_AddProgram(devInfo, prog, null, false, null);
    }

    public Ice.AsyncResult begin_AddProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        return begin_AddProgram(devInfo, prog, __ctx, true, null);
    }

    public Ice.AsyncResult begin_AddProgram(DeviceInfo devInfo, Program prog, Ice.Callback __cb)
    {
        return begin_AddProgram(devInfo, prog, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_AddProgram(devInfo, prog, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_AddProgram(DeviceInfo devInfo, Program prog, Callback_TgcsInterface_AddProgram __cb)
    {
        return begin_AddProgram(devInfo, prog, null, false, __cb);
    }

    public Ice.AsyncResult begin_AddProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, Callback_TgcsInterface_AddProgram __cb)
    {
        return begin_AddProgram(devInfo, prog, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_AddProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__AddProgram_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __AddProgram_name, __cb);
        try
        {
            __result.__prepare(__AddProgram_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            prog.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ProgramResponse end_AddProgram(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __AddProgram_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ProgramResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ProgramResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    AddProgram_async(AMI_TgcsInterface_AddProgram __cb, DeviceInfo devInfo, Program prog)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__AddProgram_name);
            __r = begin_AddProgram(devInfo, prog, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __AddProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    AddProgram_async(AMI_TgcsInterface_AddProgram __cb, DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__AddProgram_name);
            __r = begin_AddProgram(devInfo, prog, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __AddProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ProgramResponse
    ClearProgram(DeviceInfo devInfo)
    {
        return ClearProgram(devInfo, null, false);
    }

    public ProgramResponse
    ClearProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return ClearProgram(devInfo, __ctx, true);
    }

    private ProgramResponse
    ClearProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ClearProgram");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.ClearProgram(devInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __ClearProgram_name = "ClearProgram";

    public Ice.AsyncResult begin_ClearProgram(DeviceInfo devInfo)
    {
        return begin_ClearProgram(devInfo, null, false, null);
    }

    public Ice.AsyncResult begin_ClearProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return begin_ClearProgram(devInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ClearProgram(DeviceInfo devInfo, Ice.Callback __cb)
    {
        return begin_ClearProgram(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_ClearProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ClearProgram(devInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ClearProgram(DeviceInfo devInfo, Callback_TgcsInterface_ClearProgram __cb)
    {
        return begin_ClearProgram(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_ClearProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_ClearProgram __cb)
    {
        return begin_ClearProgram(devInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ClearProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ClearProgram_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ClearProgram_name, __cb);
        try
        {
            __result.__prepare(__ClearProgram_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ProgramResponse end_ClearProgram(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ClearProgram_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ProgramResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ProgramResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    ClearProgram_async(AMI_TgcsInterface_ClearProgram __cb, DeviceInfo devInfo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ClearProgram_name);
            __r = begin_ClearProgram(devInfo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ClearProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    ClearProgram_async(AMI_TgcsInterface_ClearProgram __cb, DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ClearProgram_name);
            __r = begin_ClearProgram(devInfo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ClearProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    DeleteDevice(DeviceInfo[] listDev)
    {
        return DeleteDevice(listDev, null, false);
    }

    public int
    DeleteDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        return DeleteDevice(listDev, __ctx, true);
    }

    private int
    DeleteDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("DeleteDevice");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.DeleteDevice(listDev, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __DeleteDevice_name = "DeleteDevice";

    public Ice.AsyncResult begin_DeleteDevice(DeviceInfo[] listDev)
    {
        return begin_DeleteDevice(listDev, null, false, null);
    }

    public Ice.AsyncResult begin_DeleteDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        return begin_DeleteDevice(listDev, __ctx, true, null);
    }

    public Ice.AsyncResult begin_DeleteDevice(DeviceInfo[] listDev, Ice.Callback __cb)
    {
        return begin_DeleteDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DeleteDevice(listDev, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_DeleteDevice(DeviceInfo[] listDev, Callback_TgcsInterface_DeleteDevice __cb)
    {
        return begin_DeleteDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, Callback_TgcsInterface_DeleteDevice __cb)
    {
        return begin_DeleteDevice(listDev, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_DeleteDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DeleteDevice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __DeleteDevice_name, __cb);
        try
        {
            __result.__prepare(__DeleteDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            DeviceInfoListHelper.write(__os, listDev);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_DeleteDevice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __DeleteDevice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    DeleteDevice_async(AMI_TgcsInterface_DeleteDevice __cb, DeviceInfo[] listDev)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__DeleteDevice_name);
            __r = begin_DeleteDevice(listDev, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __DeleteDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    DeleteDevice_async(AMI_TgcsInterface_DeleteDevice __cb, DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__DeleteDevice_name);
            __r = begin_DeleteDevice(listDev, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __DeleteDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ProgramResponse
    DeleteProgram(DeviceInfo devInfo, int programNo)
    {
        return DeleteProgram(devInfo, programNo, null, false);
    }

    public ProgramResponse
    DeleteProgram(DeviceInfo devInfo, int programNo, java.util.Map<String, String> __ctx)
    {
        return DeleteProgram(devInfo, programNo, __ctx, true);
    }

    private ProgramResponse
    DeleteProgram(DeviceInfo devInfo, int programNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("DeleteProgram");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.DeleteProgram(devInfo, programNo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __DeleteProgram_name = "DeleteProgram";

    public Ice.AsyncResult begin_DeleteProgram(DeviceInfo devInfo, int programNo)
    {
        return begin_DeleteProgram(devInfo, programNo, null, false, null);
    }

    public Ice.AsyncResult begin_DeleteProgram(DeviceInfo devInfo, int programNo, java.util.Map<String, String> __ctx)
    {
        return begin_DeleteProgram(devInfo, programNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_DeleteProgram(DeviceInfo devInfo, int programNo, Ice.Callback __cb)
    {
        return begin_DeleteProgram(devInfo, programNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteProgram(DeviceInfo devInfo, int programNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DeleteProgram(devInfo, programNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_DeleteProgram(DeviceInfo devInfo, int programNo, Callback_TgcsInterface_DeleteProgram __cb)
    {
        return begin_DeleteProgram(devInfo, programNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteProgram(DeviceInfo devInfo, int programNo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_DeleteProgram __cb)
    {
        return begin_DeleteProgram(devInfo, programNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_DeleteProgram(DeviceInfo devInfo, int programNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DeleteProgram_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __DeleteProgram_name, __cb);
        try
        {
            __result.__prepare(__DeleteProgram_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.writeInt(programNo);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ProgramResponse end_DeleteProgram(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __DeleteProgram_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ProgramResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ProgramResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    DeleteProgram_async(AMI_TgcsInterface_DeleteProgram __cb, DeviceInfo devInfo, int programNo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__DeleteProgram_name);
            __r = begin_DeleteProgram(devInfo, programNo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __DeleteProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    DeleteProgram_async(AMI_TgcsInterface_DeleteProgram __cb, DeviceInfo devInfo, int programNo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__DeleteProgram_name);
            __r = begin_DeleteProgram(devInfo, programNo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __DeleteProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ProgramResponse
    ExcludeProgram(DeviceInfo devInfo, Program prog)
    {
        return ExcludeProgram(devInfo, prog, null, false);
    }

    public ProgramResponse
    ExcludeProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        return ExcludeProgram(devInfo, prog, __ctx, true);
    }

    private ProgramResponse
    ExcludeProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ExcludeProgram");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.ExcludeProgram(devInfo, prog, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __ExcludeProgram_name = "ExcludeProgram";

    public Ice.AsyncResult begin_ExcludeProgram(DeviceInfo devInfo, Program prog)
    {
        return begin_ExcludeProgram(devInfo, prog, null, false, null);
    }

    public Ice.AsyncResult begin_ExcludeProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        return begin_ExcludeProgram(devInfo, prog, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ExcludeProgram(DeviceInfo devInfo, Program prog, Ice.Callback __cb)
    {
        return begin_ExcludeProgram(devInfo, prog, null, false, __cb);
    }

    public Ice.AsyncResult begin_ExcludeProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ExcludeProgram(devInfo, prog, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ExcludeProgram(DeviceInfo devInfo, Program prog, Callback_TgcsInterface_ExcludeProgram __cb)
    {
        return begin_ExcludeProgram(devInfo, prog, null, false, __cb);
    }

    public Ice.AsyncResult begin_ExcludeProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, Callback_TgcsInterface_ExcludeProgram __cb)
    {
        return begin_ExcludeProgram(devInfo, prog, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ExcludeProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ExcludeProgram_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ExcludeProgram_name, __cb);
        try
        {
            __result.__prepare(__ExcludeProgram_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            prog.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ProgramResponse end_ExcludeProgram(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ExcludeProgram_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ProgramResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ProgramResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    ExcludeProgram_async(AMI_TgcsInterface_ExcludeProgram __cb, DeviceInfo devInfo, Program prog)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ExcludeProgram_name);
            __r = begin_ExcludeProgram(devInfo, prog, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ExcludeProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    ExcludeProgram_async(AMI_TgcsInterface_ExcludeProgram __cb, DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ExcludeProgram_name);
            __r = begin_ExcludeProgram(devInfo, prog, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ExcludeProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public DeviceInfo[]
    GetDevice()
    {
        return GetDevice(null, false);
    }

    public DeviceInfo[]
    GetDevice(java.util.Map<String, String> __ctx)
    {
        return GetDevice(__ctx, true);
    }

    private DeviceInfo[]
    GetDevice(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("GetDevice");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.GetDevice(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __GetDevice_name = "GetDevice";

    public Ice.AsyncResult begin_GetDevice()
    {
        return begin_GetDevice(null, false, null);
    }

    public Ice.AsyncResult begin_GetDevice(java.util.Map<String, String> __ctx)
    {
        return begin_GetDevice(__ctx, true, null);
    }

    public Ice.AsyncResult begin_GetDevice(Ice.Callback __cb)
    {
        return begin_GetDevice(null, false, __cb);
    }

    public Ice.AsyncResult begin_GetDevice(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetDevice(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_GetDevice(Callback_TgcsInterface_GetDevice __cb)
    {
        return begin_GetDevice(null, false, __cb);
    }

    public Ice.AsyncResult begin_GetDevice(java.util.Map<String, String> __ctx, Callback_TgcsInterface_GetDevice __cb)
    {
        return begin_GetDevice(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_GetDevice(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetDevice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __GetDevice_name, __cb);
        try
        {
            __result.__prepare(__GetDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DeviceInfo[] end_GetDevice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __GetDevice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        DeviceInfo[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = DeviceInfoListHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    GetDevice_async(AMI_TgcsInterface_GetDevice __cb)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetDevice_name);
            __r = begin_GetDevice(null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    GetDevice_async(AMI_TgcsInterface_GetDevice __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetDevice_name);
            __r = begin_GetDevice(__ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public LedErrorResponse
    GetLedError(DeviceInfo devInfo)
    {
        return GetLedError(devInfo, null, false);
    }

    public LedErrorResponse
    GetLedError(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return GetLedError(devInfo, __ctx, true);
    }

    private LedErrorResponse
    GetLedError(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("GetLedError");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.GetLedError(devInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __GetLedError_name = "GetLedError";

    public Ice.AsyncResult begin_GetLedError(DeviceInfo devInfo)
    {
        return begin_GetLedError(devInfo, null, false, null);
    }

    public Ice.AsyncResult begin_GetLedError(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return begin_GetLedError(devInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_GetLedError(DeviceInfo devInfo, Ice.Callback __cb)
    {
        return begin_GetLedError(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetLedError(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetLedError(devInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_GetLedError(DeviceInfo devInfo, Callback_TgcsInterface_GetLedError __cb)
    {
        return begin_GetLedError(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetLedError(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_GetLedError __cb)
    {
        return begin_GetLedError(devInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_GetLedError(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetLedError_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __GetLedError_name, __cb);
        try
        {
            __result.__prepare(__GetLedError_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public LedErrorResponse end_GetLedError(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __GetLedError_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        LedErrorResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new LedErrorResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    GetLedError_async(AMI_TgcsInterface_GetLedError __cb, DeviceInfo devInfo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetLedError_name);
            __r = begin_GetLedError(devInfo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetLedError_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    GetLedError_async(AMI_TgcsInterface_GetLedError __cb, DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetLedError_name);
            __r = begin_GetLedError(devInfo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetLedError_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public OnlineStatusResponse
    GetOnlineStatus(DeviceInfo devInfo)
    {
        return GetOnlineStatus(devInfo, null, false);
    }

    public OnlineStatusResponse
    GetOnlineStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return GetOnlineStatus(devInfo, __ctx, true);
    }

    private OnlineStatusResponse
    GetOnlineStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("GetOnlineStatus");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.GetOnlineStatus(devInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __GetOnlineStatus_name = "GetOnlineStatus";

    public Ice.AsyncResult begin_GetOnlineStatus(DeviceInfo devInfo)
    {
        return begin_GetOnlineStatus(devInfo, null, false, null);
    }

    public Ice.AsyncResult begin_GetOnlineStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return begin_GetOnlineStatus(devInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_GetOnlineStatus(DeviceInfo devInfo, Ice.Callback __cb)
    {
        return begin_GetOnlineStatus(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetOnlineStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetOnlineStatus(devInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_GetOnlineStatus(DeviceInfo devInfo, Callback_TgcsInterface_GetOnlineStatus __cb)
    {
        return begin_GetOnlineStatus(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetOnlineStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_GetOnlineStatus __cb)
    {
        return begin_GetOnlineStatus(devInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_GetOnlineStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetOnlineStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __GetOnlineStatus_name, __cb);
        try
        {
            __result.__prepare(__GetOnlineStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public OnlineStatusResponse end_GetOnlineStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __GetOnlineStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        OnlineStatusResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new OnlineStatusResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    GetOnlineStatus_async(AMI_TgcsInterface_GetOnlineStatus __cb, DeviceInfo devInfo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetOnlineStatus_name);
            __r = begin_GetOnlineStatus(devInfo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetOnlineStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    GetOnlineStatus_async(AMI_TgcsInterface_GetOnlineStatus __cb, DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetOnlineStatus_name);
            __r = begin_GetOnlineStatus(devInfo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetOnlineStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ProgramResponse
    GetPlayingProgram(DeviceInfo devInfo)
    {
        return GetPlayingProgram(devInfo, null, false);
    }

    public ProgramResponse
    GetPlayingProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return GetPlayingProgram(devInfo, __ctx, true);
    }

    private ProgramResponse
    GetPlayingProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("GetPlayingProgram");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.GetPlayingProgram(devInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __GetPlayingProgram_name = "GetPlayingProgram";

    public Ice.AsyncResult begin_GetPlayingProgram(DeviceInfo devInfo)
    {
        return begin_GetPlayingProgram(devInfo, null, false, null);
    }

    public Ice.AsyncResult begin_GetPlayingProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return begin_GetPlayingProgram(devInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_GetPlayingProgram(DeviceInfo devInfo, Ice.Callback __cb)
    {
        return begin_GetPlayingProgram(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetPlayingProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetPlayingProgram(devInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_GetPlayingProgram(DeviceInfo devInfo, Callback_TgcsInterface_GetPlayingProgram __cb)
    {
        return begin_GetPlayingProgram(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetPlayingProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_GetPlayingProgram __cb)
    {
        return begin_GetPlayingProgram(devInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_GetPlayingProgram(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetPlayingProgram_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __GetPlayingProgram_name, __cb);
        try
        {
            __result.__prepare(__GetPlayingProgram_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ProgramResponse end_GetPlayingProgram(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __GetPlayingProgram_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ProgramResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ProgramResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    GetPlayingProgram_async(AMI_TgcsInterface_GetPlayingProgram __cb, DeviceInfo devInfo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetPlayingProgram_name);
            __r = begin_GetPlayingProgram(devInfo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetPlayingProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    GetPlayingProgram_async(AMI_TgcsInterface_GetPlayingProgram __cb, DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetPlayingProgram_name);
            __r = begin_GetPlayingProgram(devInfo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetPlayingProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ProgramResponse
    GetPrograms(DeviceInfo devInfo)
    {
        return GetPrograms(devInfo, null, false);
    }

    public ProgramResponse
    GetPrograms(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return GetPrograms(devInfo, __ctx, true);
    }

    private ProgramResponse
    GetPrograms(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("GetPrograms");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.GetPrograms(devInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __GetPrograms_name = "GetPrograms";

    public Ice.AsyncResult begin_GetPrograms(DeviceInfo devInfo)
    {
        return begin_GetPrograms(devInfo, null, false, null);
    }

    public Ice.AsyncResult begin_GetPrograms(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return begin_GetPrograms(devInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_GetPrograms(DeviceInfo devInfo, Ice.Callback __cb)
    {
        return begin_GetPrograms(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetPrograms(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetPrograms(devInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_GetPrograms(DeviceInfo devInfo, Callback_TgcsInterface_GetPrograms __cb)
    {
        return begin_GetPrograms(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetPrograms(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_GetPrograms __cb)
    {
        return begin_GetPrograms(devInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_GetPrograms(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetPrograms_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __GetPrograms_name, __cb);
        try
        {
            __result.__prepare(__GetPrograms_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ProgramResponse end_GetPrograms(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __GetPrograms_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ProgramResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ProgramResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    GetPrograms_async(AMI_TgcsInterface_GetPrograms __cb, DeviceInfo devInfo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetPrograms_name);
            __r = begin_GetPrograms(devInfo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetPrograms_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    GetPrograms_async(AMI_TgcsInterface_GetPrograms __cb, DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetPrograms_name);
            __r = begin_GetPrograms(devInfo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetPrograms_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ScreenStatusResponse
    GetScreenStatus(DeviceInfo devInfo)
    {
        return GetScreenStatus(devInfo, null, false);
    }

    public ScreenStatusResponse
    GetScreenStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return GetScreenStatus(devInfo, __ctx, true);
    }

    private ScreenStatusResponse
    GetScreenStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("GetScreenStatus");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.GetScreenStatus(devInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __GetScreenStatus_name = "GetScreenStatus";

    public Ice.AsyncResult begin_GetScreenStatus(DeviceInfo devInfo)
    {
        return begin_GetScreenStatus(devInfo, null, false, null);
    }

    public Ice.AsyncResult begin_GetScreenStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return begin_GetScreenStatus(devInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_GetScreenStatus(DeviceInfo devInfo, Ice.Callback __cb)
    {
        return begin_GetScreenStatus(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetScreenStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetScreenStatus(devInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_GetScreenStatus(DeviceInfo devInfo, Callback_TgcsInterface_GetScreenStatus __cb)
    {
        return begin_GetScreenStatus(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_GetScreenStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_GetScreenStatus __cb)
    {
        return begin_GetScreenStatus(devInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_GetScreenStatus(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetScreenStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __GetScreenStatus_name, __cb);
        try
        {
            __result.__prepare(__GetScreenStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ScreenStatusResponse end_GetScreenStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __GetScreenStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ScreenStatusResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ScreenStatusResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    GetScreenStatus_async(AMI_TgcsInterface_GetScreenStatus __cb, DeviceInfo devInfo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetScreenStatus_name);
            __r = begin_GetScreenStatus(devInfo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetScreenStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    GetScreenStatus_async(AMI_TgcsInterface_GetScreenStatus __cb, DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__GetScreenStatus_name);
            __r = begin_GetScreenStatus(devInfo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __GetScreenStatus_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    ModifyDevice(DeviceInfo[] listDev)
    {
        return ModifyDevice(listDev, null, false);
    }

    public int
    ModifyDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        return ModifyDevice(listDev, __ctx, true);
    }

    private int
    ModifyDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ModifyDevice");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.ModifyDevice(listDev, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __ModifyDevice_name = "ModifyDevice";

    public Ice.AsyncResult begin_ModifyDevice(DeviceInfo[] listDev)
    {
        return begin_ModifyDevice(listDev, null, false, null);
    }

    public Ice.AsyncResult begin_ModifyDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        return begin_ModifyDevice(listDev, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ModifyDevice(DeviceInfo[] listDev, Ice.Callback __cb)
    {
        return begin_ModifyDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_ModifyDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ModifyDevice(listDev, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ModifyDevice(DeviceInfo[] listDev, Callback_TgcsInterface_ModifyDevice __cb)
    {
        return begin_ModifyDevice(listDev, null, false, __cb);
    }

    public Ice.AsyncResult begin_ModifyDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, Callback_TgcsInterface_ModifyDevice __cb)
    {
        return begin_ModifyDevice(listDev, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ModifyDevice(DeviceInfo[] listDev, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ModifyDevice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ModifyDevice_name, __cb);
        try
        {
            __result.__prepare(__ModifyDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            DeviceInfoListHelper.write(__os, listDev);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_ModifyDevice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ModifyDevice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    ModifyDevice_async(AMI_TgcsInterface_ModifyDevice __cb, DeviceInfo[] listDev)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ModifyDevice_name);
            __r = begin_ModifyDevice(listDev, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ModifyDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    ModifyDevice_async(AMI_TgcsInterface_ModifyDevice __cb, DeviceInfo[] listDev, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ModifyDevice_name);
            __r = begin_ModifyDevice(listDev, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ModifyDevice_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ProgramResponse
    ModifyProgram(DeviceInfo devInfo, Program prog)
    {
        return ModifyProgram(devInfo, prog, null, false);
    }

    public ProgramResponse
    ModifyProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        return ModifyProgram(devInfo, prog, __ctx, true);
    }

    private ProgramResponse
    ModifyProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ModifyProgram");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.ModifyProgram(devInfo, prog, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __ModifyProgram_name = "ModifyProgram";

    public Ice.AsyncResult begin_ModifyProgram(DeviceInfo devInfo, Program prog)
    {
        return begin_ModifyProgram(devInfo, prog, null, false, null);
    }

    public Ice.AsyncResult begin_ModifyProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        return begin_ModifyProgram(devInfo, prog, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ModifyProgram(DeviceInfo devInfo, Program prog, Ice.Callback __cb)
    {
        return begin_ModifyProgram(devInfo, prog, null, false, __cb);
    }

    public Ice.AsyncResult begin_ModifyProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ModifyProgram(devInfo, prog, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ModifyProgram(DeviceInfo devInfo, Program prog, Callback_TgcsInterface_ModifyProgram __cb)
    {
        return begin_ModifyProgram(devInfo, prog, null, false, __cb);
    }

    public Ice.AsyncResult begin_ModifyProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, Callback_TgcsInterface_ModifyProgram __cb)
    {
        return begin_ModifyProgram(devInfo, prog, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ModifyProgram(DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ModifyProgram_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ModifyProgram_name, __cb);
        try
        {
            __result.__prepare(__ModifyProgram_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            prog.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ProgramResponse end_ModifyProgram(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ModifyProgram_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ProgramResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new ProgramResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    ModifyProgram_async(AMI_TgcsInterface_ModifyProgram __cb, DeviceInfo devInfo, Program prog)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ModifyProgram_name);
            __r = begin_ModifyProgram(devInfo, prog, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ModifyProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    ModifyProgram_async(AMI_TgcsInterface_ModifyProgram __cb, DeviceInfo devInfo, Program prog, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__ModifyProgram_name);
            __r = begin_ModifyProgram(devInfo, prog, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __ModifyProgram_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    SetLedBrightness(DeviceInfo devInfo, int brightness)
    {
        return SetLedBrightness(devInfo, brightness, null, false);
    }

    public int
    SetLedBrightness(DeviceInfo devInfo, int brightness, java.util.Map<String, String> __ctx)
    {
        return SetLedBrightness(devInfo, brightness, __ctx, true);
    }

    private int
    SetLedBrightness(DeviceInfo devInfo, int brightness, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("SetLedBrightness");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.SetLedBrightness(devInfo, brightness, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __SetLedBrightness_name = "SetLedBrightness";

    public Ice.AsyncResult begin_SetLedBrightness(DeviceInfo devInfo, int brightness)
    {
        return begin_SetLedBrightness(devInfo, brightness, null, false, null);
    }

    public Ice.AsyncResult begin_SetLedBrightness(DeviceInfo devInfo, int brightness, java.util.Map<String, String> __ctx)
    {
        return begin_SetLedBrightness(devInfo, brightness, __ctx, true, null);
    }

    public Ice.AsyncResult begin_SetLedBrightness(DeviceInfo devInfo, int brightness, Ice.Callback __cb)
    {
        return begin_SetLedBrightness(devInfo, brightness, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedBrightness(DeviceInfo devInfo, int brightness, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SetLedBrightness(devInfo, brightness, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_SetLedBrightness(DeviceInfo devInfo, int brightness, Callback_TgcsInterface_SetLedBrightness __cb)
    {
        return begin_SetLedBrightness(devInfo, brightness, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedBrightness(DeviceInfo devInfo, int brightness, java.util.Map<String, String> __ctx, Callback_TgcsInterface_SetLedBrightness __cb)
    {
        return begin_SetLedBrightness(devInfo, brightness, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_SetLedBrightness(DeviceInfo devInfo, int brightness, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SetLedBrightness_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __SetLedBrightness_name, __cb);
        try
        {
            __result.__prepare(__SetLedBrightness_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.writeInt(brightness);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_SetLedBrightness(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __SetLedBrightness_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    SetLedBrightness_async(AMI_TgcsInterface_SetLedBrightness __cb, DeviceInfo devInfo, int brightness)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedBrightness_name);
            __r = begin_SetLedBrightness(devInfo, brightness, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedBrightness_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    SetLedBrightness_async(AMI_TgcsInterface_SetLedBrightness __cb, DeviceInfo devInfo, int brightness, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedBrightness_name);
            __r = begin_SetLedBrightness(devInfo, brightness, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedBrightness_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness)
    {
        return SetLedBrightnessTimed(devInfo, listBrightness, null, false);
    }

    public int
    SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, java.util.Map<String, String> __ctx)
    {
        return SetLedBrightnessTimed(devInfo, listBrightness, __ctx, true);
    }

    private int
    SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("SetLedBrightnessTimed");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.SetLedBrightnessTimed(devInfo, listBrightness, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __SetLedBrightnessTimed_name = "SetLedBrightnessTimed";

    public Ice.AsyncResult begin_SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness)
    {
        return begin_SetLedBrightnessTimed(devInfo, listBrightness, null, false, null);
    }

    public Ice.AsyncResult begin_SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, java.util.Map<String, String> __ctx)
    {
        return begin_SetLedBrightnessTimed(devInfo, listBrightness, __ctx, true, null);
    }

    public Ice.AsyncResult begin_SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, Ice.Callback __cb)
    {
        return begin_SetLedBrightnessTimed(devInfo, listBrightness, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SetLedBrightnessTimed(devInfo, listBrightness, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, Callback_TgcsInterface_SetLedBrightnessTimed __cb)
    {
        return begin_SetLedBrightnessTimed(devInfo, listBrightness, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, java.util.Map<String, String> __ctx, Callback_TgcsInterface_SetLedBrightnessTimed __cb)
    {
        return begin_SetLedBrightnessTimed(devInfo, listBrightness, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_SetLedBrightnessTimed(DeviceInfo devInfo, BrightnessGroup[] listBrightness, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SetLedBrightnessTimed_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __SetLedBrightnessTimed_name, __cb);
        try
        {
            __result.__prepare(__SetLedBrightnessTimed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            BrightnessGroupListHelper.write(__os, listBrightness);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_SetLedBrightnessTimed(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __SetLedBrightnessTimed_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    SetLedBrightnessTimed_async(AMI_TgcsInterface_SetLedBrightnessTimed __cb, DeviceInfo devInfo, BrightnessGroup[] listBrightness)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedBrightnessTimed_name);
            __r = begin_SetLedBrightnessTimed(devInfo, listBrightness, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedBrightnessTimed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    SetLedBrightnessTimed_async(AMI_TgcsInterface_SetLedBrightnessTimed __cb, DeviceInfo devInfo, BrightnessGroup[] listBrightness, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedBrightnessTimed_name);
            __r = begin_SetLedBrightnessTimed(devInfo, listBrightness, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedBrightnessTimed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    SetLedPower(DeviceInfo devInfo, int power)
    {
        return SetLedPower(devInfo, power, null, false);
    }

    public int
    SetLedPower(DeviceInfo devInfo, int power, java.util.Map<String, String> __ctx)
    {
        return SetLedPower(devInfo, power, __ctx, true);
    }

    private int
    SetLedPower(DeviceInfo devInfo, int power, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("SetLedPower");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.SetLedPower(devInfo, power, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __SetLedPower_name = "SetLedPower";

    public Ice.AsyncResult begin_SetLedPower(DeviceInfo devInfo, int power)
    {
        return begin_SetLedPower(devInfo, power, null, false, null);
    }

    public Ice.AsyncResult begin_SetLedPower(DeviceInfo devInfo, int power, java.util.Map<String, String> __ctx)
    {
        return begin_SetLedPower(devInfo, power, __ctx, true, null);
    }

    public Ice.AsyncResult begin_SetLedPower(DeviceInfo devInfo, int power, Ice.Callback __cb)
    {
        return begin_SetLedPower(devInfo, power, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedPower(DeviceInfo devInfo, int power, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SetLedPower(devInfo, power, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_SetLedPower(DeviceInfo devInfo, int power, Callback_TgcsInterface_SetLedPower __cb)
    {
        return begin_SetLedPower(devInfo, power, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedPower(DeviceInfo devInfo, int power, java.util.Map<String, String> __ctx, Callback_TgcsInterface_SetLedPower __cb)
    {
        return begin_SetLedPower(devInfo, power, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_SetLedPower(DeviceInfo devInfo, int power, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SetLedPower_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __SetLedPower_name, __cb);
        try
        {
            __result.__prepare(__SetLedPower_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.writeInt(power);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_SetLedPower(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __SetLedPower_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    SetLedPower_async(AMI_TgcsInterface_SetLedPower __cb, DeviceInfo devInfo, int power)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedPower_name);
            __r = begin_SetLedPower(devInfo, power, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedPower_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    SetLedPower_async(AMI_TgcsInterface_SetLedPower __cb, DeviceInfo devInfo, int power, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedPower_name);
            __r = begin_SetLedPower(devInfo, power, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedPower_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower)
    {
        return SetLedPowerTimed(devInfo, listPower, null, false);
    }

    public int
    SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, java.util.Map<String, String> __ctx)
    {
        return SetLedPowerTimed(devInfo, listPower, __ctx, true);
    }

    private int
    SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("SetLedPowerTimed");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.SetLedPowerTimed(devInfo, listPower, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __SetLedPowerTimed_name = "SetLedPowerTimed";

    public Ice.AsyncResult begin_SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower)
    {
        return begin_SetLedPowerTimed(devInfo, listPower, null, false, null);
    }

    public Ice.AsyncResult begin_SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, java.util.Map<String, String> __ctx)
    {
        return begin_SetLedPowerTimed(devInfo, listPower, __ctx, true, null);
    }

    public Ice.AsyncResult begin_SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, Ice.Callback __cb)
    {
        return begin_SetLedPowerTimed(devInfo, listPower, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SetLedPowerTimed(devInfo, listPower, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, Callback_TgcsInterface_SetLedPowerTimed __cb)
    {
        return begin_SetLedPowerTimed(devInfo, listPower, null, false, __cb);
    }

    public Ice.AsyncResult begin_SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, java.util.Map<String, String> __ctx, Callback_TgcsInterface_SetLedPowerTimed __cb)
    {
        return begin_SetLedPowerTimed(devInfo, listPower, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_SetLedPowerTimed(DeviceInfo devInfo, PowerGroup[] listPower, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SetLedPowerTimed_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __SetLedPowerTimed_name, __cb);
        try
        {
            __result.__prepare(__SetLedPowerTimed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            PowerGroupListHelper.write(__os, listPower);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_SetLedPowerTimed(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __SetLedPowerTimed_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    SetLedPowerTimed_async(AMI_TgcsInterface_SetLedPowerTimed __cb, DeviceInfo devInfo, PowerGroup[] listPower)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedPowerTimed_name);
            __r = begin_SetLedPowerTimed(devInfo, listPower, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedPowerTimed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    SetLedPowerTimed_async(AMI_TgcsInterface_SetLedPowerTimed __cb, DeviceInfo devInfo, PowerGroup[] listPower, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SetLedPowerTimed_name);
            __r = begin_SetLedPowerTimed(devInfo, listPower, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SetLedPowerTimed_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public int
    SyncLedTime(DeviceInfo devInfo)
    {
        return SyncLedTime(devInfo, null, false);
    }

    public int
    SyncLedTime(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return SyncLedTime(devInfo, __ctx, true);
    }

    private int
    SyncLedTime(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("SyncLedTime");
                __delBase = __getDelegate(false);
                _TgcsInterfaceDel __del = (_TgcsInterfaceDel)__delBase;
                return __del.SyncLedTime(devInfo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __SyncLedTime_name = "SyncLedTime";

    public Ice.AsyncResult begin_SyncLedTime(DeviceInfo devInfo)
    {
        return begin_SyncLedTime(devInfo, null, false, null);
    }

    public Ice.AsyncResult begin_SyncLedTime(DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        return begin_SyncLedTime(devInfo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_SyncLedTime(DeviceInfo devInfo, Ice.Callback __cb)
    {
        return begin_SyncLedTime(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_SyncLedTime(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SyncLedTime(devInfo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_SyncLedTime(DeviceInfo devInfo, Callback_TgcsInterface_SyncLedTime __cb)
    {
        return begin_SyncLedTime(devInfo, null, false, __cb);
    }

    public Ice.AsyncResult begin_SyncLedTime(DeviceInfo devInfo, java.util.Map<String, String> __ctx, Callback_TgcsInterface_SyncLedTime __cb)
    {
        return begin_SyncLedTime(devInfo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_SyncLedTime(DeviceInfo devInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SyncLedTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __SyncLedTime_name, __cb);
        try
        {
            __result.__prepare(__SyncLedTime_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devInfo.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_SyncLedTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __SyncLedTime_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    SyncLedTime_async(AMI_TgcsInterface_SyncLedTime __cb, DeviceInfo devInfo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SyncLedTime_name);
            __r = begin_SyncLedTime(devInfo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SyncLedTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    SyncLedTime_async(AMI_TgcsInterface_SyncLedTime __cb, DeviceInfo devInfo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__SyncLedTime_name);
            __r = begin_SyncLedTime(devInfo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __SyncLedTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static TgcsInterfacePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        TgcsInterfacePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TgcsInterfacePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::TgcsIce::TgcsInterface"))
                {
                    TgcsInterfacePrxHelper __h = new TgcsInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TgcsInterfacePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TgcsInterfacePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TgcsInterfacePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::TgcsIce::TgcsInterface", __ctx))
                {
                    TgcsInterfacePrxHelper __h = new TgcsInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TgcsInterfacePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TgcsInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::TgcsIce::TgcsInterface"))
                {
                    TgcsInterfacePrxHelper __h = new TgcsInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TgcsInterfacePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TgcsInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::TgcsIce::TgcsInterface", __ctx))
                {
                    TgcsInterfacePrxHelper __h = new TgcsInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TgcsInterfacePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        TgcsInterfacePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (TgcsInterfacePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                TgcsInterfacePrxHelper __h = new TgcsInterfacePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TgcsInterfacePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TgcsInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TgcsInterfacePrxHelper __h = new TgcsInterfacePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _TgcsInterfaceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _TgcsInterfaceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, TgcsInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static TgcsInterfacePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TgcsInterfacePrxHelper result = new TgcsInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
