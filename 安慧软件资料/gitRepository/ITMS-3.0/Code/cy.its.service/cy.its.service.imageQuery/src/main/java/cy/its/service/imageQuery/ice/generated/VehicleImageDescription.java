// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.imageQuery.ice.generated;

// <auto-generated>
//
// Generated from file `Base.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public class VehicleImageDescription implements java.lang.Cloneable, java.io.Serializable
{
    public VehicleImageIdentity imageIdentity;

    public int snapShotMode;

    public int frameIndex;

    public int imageWidth;

    public int imageHeight;

    public int imageWidthStep;

    public ImageFormat format;

    public String timeStamp;

    public int imageDataLength;

    public int imageDataCRC;

    public String watermark;

    public ImageLocation location;

    public java.util.Map<java.lang.String, java.lang.String> properies;

    public VehicleImageDescription()
    {
    }

    public VehicleImageDescription(VehicleImageIdentity imageIdentity, int snapShotMode, int frameIndex, int imageWidth, int imageHeight, int imageWidthStep, ImageFormat format, String timeStamp, int imageDataLength, int imageDataCRC, String watermark, ImageLocation location, java.util.Map<java.lang.String, java.lang.String> properies)
    {
        this.imageIdentity = imageIdentity;
        this.snapShotMode = snapShotMode;
        this.frameIndex = frameIndex;
        this.imageWidth = imageWidth;
        this.imageHeight = imageHeight;
        this.imageWidthStep = imageWidthStep;
        this.format = format;
        this.timeStamp = timeStamp;
        this.imageDataLength = imageDataLength;
        this.imageDataCRC = imageDataCRC;
        this.watermark = watermark;
        this.location = location;
        this.properies = properies;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        VehicleImageDescription _r = null;
        try
        {
            _r = (VehicleImageDescription)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(imageIdentity != _r.imageIdentity && imageIdentity != null && !imageIdentity.equals(_r.imageIdentity))
            {
                return false;
            }
            if(snapShotMode != _r.snapShotMode)
            {
                return false;
            }
            if(frameIndex != _r.frameIndex)
            {
                return false;
            }
            if(imageWidth != _r.imageWidth)
            {
                return false;
            }
            if(imageHeight != _r.imageHeight)
            {
                return false;
            }
            if(imageWidthStep != _r.imageWidthStep)
            {
                return false;
            }
            if(format != _r.format && format != null && !format.equals(_r.format))
            {
                return false;
            }
            if(timeStamp != _r.timeStamp && timeStamp != null && !timeStamp.equals(_r.timeStamp))
            {
                return false;
            }
            if(imageDataLength != _r.imageDataLength)
            {
                return false;
            }
            if(imageDataCRC != _r.imageDataCRC)
            {
                return false;
            }
            if(watermark != _r.watermark && watermark != null && !watermark.equals(_r.watermark))
            {
                return false;
            }
            if(location != _r.location && location != null && !location.equals(_r.location))
            {
                return false;
            }
            if(properies != _r.properies && properies != null && !properies.equals(_r.properies))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(imageIdentity != null)
        {
            __h = 5 * __h + imageIdentity.hashCode();
        }
        __h = 5 * __h + snapShotMode;
        __h = 5 * __h + frameIndex;
        __h = 5 * __h + imageWidth;
        __h = 5 * __h + imageHeight;
        __h = 5 * __h + imageWidthStep;
        if(format != null)
        {
            __h = 5 * __h + format.hashCode();
        }
        if(timeStamp != null)
        {
            __h = 5 * __h + timeStamp.hashCode();
        }
        __h = 5 * __h + imageDataLength;
        __h = 5 * __h + imageDataCRC;
        if(watermark != null)
        {
            __h = 5 * __h + watermark.hashCode();
        }
        if(location != null)
        {
            __h = 5 * __h + location.hashCode();
        }
        if(properies != null)
        {
            __h = 5 * __h + properies.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        imageIdentity.__write(__os);
        __os.writeInt(snapShotMode);
        __os.writeInt(frameIndex);
        __os.writeInt(imageWidth);
        __os.writeInt(imageHeight);
        __os.writeInt(imageWidthStep);
        format.__write(__os);
        __os.writeString(timeStamp);
        __os.writeInt(imageDataLength);
        __os.writeInt(imageDataCRC);
        __os.writeString(watermark);
        location.__write(__os);
        StringStringDictHelper.write(__os, properies);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        imageIdentity = new VehicleImageIdentity();
        imageIdentity.__read(__is);
        snapShotMode = __is.readInt();
        frameIndex = __is.readInt();
        imageWidth = __is.readInt();
        imageHeight = __is.readInt();
        imageWidthStep = __is.readInt();
        format = ImageFormat.__read(__is);
        timeStamp = __is.readString();
        imageDataLength = __is.readInt();
        imageDataCRC = __is.readInt();
        watermark = __is.readString();
        location = new ImageLocation();
        location.__read(__is);
        properies = StringStringDictHelper.read(__is);
    }
}
