// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.imageQuery.ice.generated;

// <auto-generated>
//
// Generated from file `ViolationImageStore.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class ViolationImageStorePrxHelper extends Ice.ObjectPrxHelperBase implements ViolationImageStorePrx
{
    public int
    CountViolationByTime(String startTime, String endTime, String deviceNo)
    {
        return CountViolationByTime(startTime, endTime, deviceNo, null, false);
    }

    public int
    CountViolationByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx)
    {
        return CountViolationByTime(startTime, endTime, deviceNo, __ctx, true);
    }

    private int
    CountViolationByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("CountViolationByTime");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.CountViolationByTime(startTime, endTime, deviceNo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __CountViolationByTime_name = "CountViolationByTime";

    public Ice.AsyncResult begin_CountViolationByTime(String startTime, String endTime, String deviceNo)
    {
        return begin_CountViolationByTime(startTime, endTime, deviceNo, null, false, null);
    }

    public Ice.AsyncResult begin_CountViolationByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx)
    {
        return begin_CountViolationByTime(startTime, endTime, deviceNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_CountViolationByTime(String startTime, String endTime, String deviceNo, Ice.Callback __cb)
    {
        return begin_CountViolationByTime(startTime, endTime, deviceNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_CountViolationByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_CountViolationByTime(startTime, endTime, deviceNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_CountViolationByTime(String startTime, String endTime, String deviceNo, Callback_ViolationImageStore_CountViolationByTime __cb)
    {
        return begin_CountViolationByTime(startTime, endTime, deviceNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_CountViolationByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_CountViolationByTime __cb)
    {
        return begin_CountViolationByTime(startTime, endTime, deviceNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_CountViolationByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__CountViolationByTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __CountViolationByTime_name, __cb);
        try
        {
            __result.__prepare(__CountViolationByTime_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(startTime);
            __os.writeString(endTime);
            __os.writeString(deviceNo);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_CountViolationByTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __CountViolationByTime_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    CountViolationByTime_async(AMI_ViolationImageStore_CountViolationByTime __cb, String startTime, String endTime, String deviceNo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__CountViolationByTime_name);
            __r = begin_CountViolationByTime(startTime, endTime, deviceNo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __CountViolationByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    CountViolationByTime_async(AMI_ViolationImageStore_CountViolationByTime __cb, String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__CountViolationByTime_name);
            __r = begin_CountViolationByTime(startTime, endTime, deviceNo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __CountViolationByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ViolationVehicle[]
    QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex)
    {
        return QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false);
    }

    public ViolationVehicle[]
    QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx)
    {
        return QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true);
    }

    private ViolationVehicle[]
    QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("QueryViolationByTime");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __QueryViolationByTime_name = "QueryViolationByTime";

    public Ice.AsyncResult begin_QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex)
    {
        return begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, null);
    }

    public Ice.AsyncResult begin_QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx)
    {
        return begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, null);
    }

    public Ice.AsyncResult begin_QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, Ice.Callback __cb)
    {
        return begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, __cb);
    }

    public Ice.AsyncResult begin_QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, Callback_ViolationImageStore_QueryViolationByTime __cb)
    {
        return begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, __cb);
    }

    public Ice.AsyncResult begin_QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_QueryViolationByTime __cb)
    {
        return begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__QueryViolationByTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __QueryViolationByTime_name, __cb);
        try
        {
            __result.__prepare(__QueryViolationByTime_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(startTime);
            __os.writeString(endTime);
            __os.writeString(deviceNo);
            __os.writeInt(pageSize);
            __os.writeInt(pageIndex);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ViolationVehicle[] end_QueryViolationByTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __QueryViolationByTime_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ViolationVehicle[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ViolationVehicleSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    QueryViolationByTime_async(AMI_ViolationImageStore_QueryViolationByTime __cb, String startTime, String endTime, String deviceNo, int pageSize, int pageIndex)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__QueryViolationByTime_name);
            __r = begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __QueryViolationByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    QueryViolationByTime_async(AMI_ViolationImageStore_QueryViolationByTime __cb, String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__QueryViolationByTime_name);
            __r = begin_QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __QueryViolationByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public VehicleImage[]
    RetrieveViolationImages(String deviceNo, String snapNbr)
    {
        return RetrieveViolationImages(deviceNo, snapNbr, null, false);
    }

    public VehicleImage[]
    RetrieveViolationImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return RetrieveViolationImages(deviceNo, snapNbr, __ctx, true);
    }

    private VehicleImage[]
    RetrieveViolationImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("RetrieveViolationImages");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.RetrieveViolationImages(deviceNo, snapNbr, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __RetrieveViolationImages_name = "RetrieveViolationImages";

    public Ice.AsyncResult begin_RetrieveViolationImages(String deviceNo, String snapNbr)
    {
        return begin_RetrieveViolationImages(deviceNo, snapNbr, null, false, null);
    }

    public Ice.AsyncResult begin_RetrieveViolationImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return begin_RetrieveViolationImages(deviceNo, snapNbr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_RetrieveViolationImages(String deviceNo, String snapNbr, Ice.Callback __cb)
    {
        return begin_RetrieveViolationImages(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RetrieveViolationImages(deviceNo, snapNbr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationImages(String deviceNo, String snapNbr, Callback_ViolationImageStore_RetrieveViolationImages __cb)
    {
        return begin_RetrieveViolationImages(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_RetrieveViolationImages __cb)
    {
        return begin_RetrieveViolationImages(deviceNo, snapNbr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_RetrieveViolationImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RetrieveViolationImages_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __RetrieveViolationImages_name, __cb);
        try
        {
            __result.__prepare(__RetrieveViolationImages_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(deviceNo);
            __os.writeString(snapNbr);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public VehicleImage[] end_RetrieveViolationImages(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __RetrieveViolationImages_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        VehicleImage[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = VehicleImageSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    RetrieveViolationImages_async(AMI_ViolationImageStore_RetrieveViolationImages __cb, String deviceNo, String snapNbr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveViolationImages_name);
            __r = begin_RetrieveViolationImages(deviceNo, snapNbr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveViolationImages_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    RetrieveViolationImages_async(AMI_ViolationImageStore_RetrieveViolationImages __cb, String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveViolationImages_name);
            __r = begin_RetrieveViolationImages(deviceNo, snapNbr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveViolationImages_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public ViolationVehicle[]
    RetrieveViolationInfo(String deviceNo, String snapNbr)
    {
        return RetrieveViolationInfo(deviceNo, snapNbr, null, false);
    }

    public ViolationVehicle[]
    RetrieveViolationInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return RetrieveViolationInfo(deviceNo, snapNbr, __ctx, true);
    }

    private ViolationVehicle[]
    RetrieveViolationInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("RetrieveViolationInfo");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.RetrieveViolationInfo(deviceNo, snapNbr, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __RetrieveViolationInfo_name = "RetrieveViolationInfo";

    public Ice.AsyncResult begin_RetrieveViolationInfo(String deviceNo, String snapNbr)
    {
        return begin_RetrieveViolationInfo(deviceNo, snapNbr, null, false, null);
    }

    public Ice.AsyncResult begin_RetrieveViolationInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return begin_RetrieveViolationInfo(deviceNo, snapNbr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_RetrieveViolationInfo(String deviceNo, String snapNbr, Ice.Callback __cb)
    {
        return begin_RetrieveViolationInfo(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RetrieveViolationInfo(deviceNo, snapNbr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationInfo(String deviceNo, String snapNbr, Callback_ViolationImageStore_RetrieveViolationInfo __cb)
    {
        return begin_RetrieveViolationInfo(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_RetrieveViolationInfo __cb)
    {
        return begin_RetrieveViolationInfo(deviceNo, snapNbr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_RetrieveViolationInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RetrieveViolationInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __RetrieveViolationInfo_name, __cb);
        try
        {
            __result.__prepare(__RetrieveViolationInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(deviceNo);
            __os.writeString(snapNbr);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ViolationVehicle[] end_RetrieveViolationInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __RetrieveViolationInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        ViolationVehicle[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = ViolationVehicleSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    RetrieveViolationInfo_async(AMI_ViolationImageStore_RetrieveViolationInfo __cb, String deviceNo, String snapNbr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveViolationInfo_name);
            __r = begin_RetrieveViolationInfo(deviceNo, snapNbr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveViolationInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    RetrieveViolationInfo_async(AMI_ViolationImageStore_RetrieveViolationInfo __cb, String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveViolationInfo_name);
            __r = begin_RetrieveViolationInfo(deviceNo, snapNbr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveViolationInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public VehicleImage[]
    RetrieveViolationMedia(String deviceNo, String snapNbr)
    {
        return RetrieveViolationMedia(deviceNo, snapNbr, null, false);
    }

    public VehicleImage[]
    RetrieveViolationMedia(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return RetrieveViolationMedia(deviceNo, snapNbr, __ctx, true);
    }

    private VehicleImage[]
    RetrieveViolationMedia(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("RetrieveViolationMedia");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.RetrieveViolationMedia(deviceNo, snapNbr, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __RetrieveViolationMedia_name = "RetrieveViolationMedia";

    public Ice.AsyncResult begin_RetrieveViolationMedia(String deviceNo, String snapNbr)
    {
        return begin_RetrieveViolationMedia(deviceNo, snapNbr, null, false, null);
    }

    public Ice.AsyncResult begin_RetrieveViolationMedia(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return begin_RetrieveViolationMedia(deviceNo, snapNbr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_RetrieveViolationMedia(String deviceNo, String snapNbr, Ice.Callback __cb)
    {
        return begin_RetrieveViolationMedia(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationMedia(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RetrieveViolationMedia(deviceNo, snapNbr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationMedia(String deviceNo, String snapNbr, Callback_ViolationImageStore_RetrieveViolationMedia __cb)
    {
        return begin_RetrieveViolationMedia(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveViolationMedia(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_RetrieveViolationMedia __cb)
    {
        return begin_RetrieveViolationMedia(deviceNo, snapNbr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_RetrieveViolationMedia(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RetrieveViolationMedia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __RetrieveViolationMedia_name, __cb);
        try
        {
            __result.__prepare(__RetrieveViolationMedia_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(deviceNo);
            __os.writeString(snapNbr);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public VehicleImage[] end_RetrieveViolationMedia(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __RetrieveViolationMedia_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        VehicleImage[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = VehicleImageSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    RetrieveViolationMedia_async(AMI_ViolationImageStore_RetrieveViolationMedia __cb, String deviceNo, String snapNbr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveViolationMedia_name);
            __r = begin_RetrieveViolationMedia(deviceNo, snapNbr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveViolationMedia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    RetrieveViolationMedia_async(AMI_ViolationImageStore_RetrieveViolationMedia __cb, String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveViolationMedia_name);
            __r = begin_RetrieveViolationMedia(deviceNo, snapNbr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveViolationMedia_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, ViolationVehicleHolder savedViolation)
    {
        return StoreViolation(violation, vehicleImages, savedViolation, null, false);
    }

    public boolean
    StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, ViolationVehicleHolder savedViolation, java.util.Map<String, String> __ctx)
    {
        return StoreViolation(violation, vehicleImages, savedViolation, __ctx, true);
    }

    private boolean
    StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, ViolationVehicleHolder savedViolation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("StoreViolation");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.StoreViolation(violation, vehicleImages, savedViolation, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __StoreViolation_name = "StoreViolation";

    public Ice.AsyncResult begin_StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages)
    {
        return begin_StoreViolation(violation, vehicleImages, null, false, null);
    }

    public Ice.AsyncResult begin_StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx)
    {
        return begin_StoreViolation(violation, vehicleImages, __ctx, true, null);
    }

    public Ice.AsyncResult begin_StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, Ice.Callback __cb)
    {
        return begin_StoreViolation(violation, vehicleImages, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_StoreViolation(violation, vehicleImages, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, Callback_ViolationImageStore_StoreViolation __cb)
    {
        return begin_StoreViolation(violation, vehicleImages, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_StoreViolation __cb)
    {
        return begin_StoreViolation(violation, vehicleImages, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_StoreViolation(ViolationVehicle violation, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__StoreViolation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __StoreViolation_name, __cb);
        try
        {
            __result.__prepare(__StoreViolation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            violation.__write(__os);
            VehicleImageSeqHelper.write(__os, vehicleImages);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_StoreViolation(ViolationVehicleHolder savedViolation, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __StoreViolation_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        savedViolation.value = new ViolationVehicle();
        savedViolation.value.__read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    StoreViolation_async(AMI_ViolationImageStore_StoreViolation __cb, ViolationVehicle violation, VehicleImage[] vehicleImages)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreViolation_name);
            __r = begin_StoreViolation(violation, vehicleImages, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreViolation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreViolation_async(AMI_ViolationImageStore_StoreViolation __cb, ViolationVehicle violation, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreViolation_name);
            __r = begin_StoreViolation(violation, vehicleImages, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreViolation_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreViolation2(ViolationVehicle violation, byte[] imageData, ViolationVehicleHolder savedViolation)
    {
        return StoreViolation2(violation, imageData, savedViolation, null, false);
    }

    public boolean
    StoreViolation2(ViolationVehicle violation, byte[] imageData, ViolationVehicleHolder savedViolation, java.util.Map<String, String> __ctx)
    {
        return StoreViolation2(violation, imageData, savedViolation, __ctx, true);
    }

    private boolean
    StoreViolation2(ViolationVehicle violation, byte[] imageData, ViolationVehicleHolder savedViolation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("StoreViolation2");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.StoreViolation2(violation, imageData, savedViolation, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __StoreViolation2_name = "StoreViolation2";

    public Ice.AsyncResult begin_StoreViolation2(ViolationVehicle violation, byte[] imageData)
    {
        return begin_StoreViolation2(violation, imageData, null, false, null);
    }

    public Ice.AsyncResult begin_StoreViolation2(ViolationVehicle violation, byte[] imageData, java.util.Map<String, String> __ctx)
    {
        return begin_StoreViolation2(violation, imageData, __ctx, true, null);
    }

    public Ice.AsyncResult begin_StoreViolation2(ViolationVehicle violation, byte[] imageData, Ice.Callback __cb)
    {
        return begin_StoreViolation2(violation, imageData, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreViolation2(ViolationVehicle violation, byte[] imageData, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_StoreViolation2(violation, imageData, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_StoreViolation2(ViolationVehicle violation, byte[] imageData, Callback_ViolationImageStore_StoreViolation2 __cb)
    {
        return begin_StoreViolation2(violation, imageData, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreViolation2(ViolationVehicle violation, byte[] imageData, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_StoreViolation2 __cb)
    {
        return begin_StoreViolation2(violation, imageData, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_StoreViolation2(ViolationVehicle violation, byte[] imageData, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__StoreViolation2_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __StoreViolation2_name, __cb);
        try
        {
            __result.__prepare(__StoreViolation2_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            violation.__write(__os);
            Ice.ByteSeqHelper.write(__os, imageData);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_StoreViolation2(ViolationVehicleHolder savedViolation, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __StoreViolation2_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        savedViolation.value = new ViolationVehicle();
        savedViolation.value.__read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    StoreViolation2_async(AMI_ViolationImageStore_StoreViolation2 __cb, ViolationVehicle violation, byte[] imageData)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreViolation2_name);
            __r = begin_StoreViolation2(violation, imageData, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreViolation2_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreViolation2_async(AMI_ViolationImageStore_StoreViolation2 __cb, ViolationVehicle violation, byte[] imageData, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreViolation2_name);
            __r = begin_StoreViolation2(violation, imageData, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreViolation2_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    UpdateViolaitonInfo(ViolationVehicle vehicle, ViolationVehicleHolder savedVehicle)
    {
        return UpdateViolaitonInfo(vehicle, savedVehicle, null, false);
    }

    public boolean
    UpdateViolaitonInfo(ViolationVehicle vehicle, ViolationVehicleHolder savedVehicle, java.util.Map<String, String> __ctx)
    {
        return UpdateViolaitonInfo(vehicle, savedVehicle, __ctx, true);
    }

    private boolean
    UpdateViolaitonInfo(ViolationVehicle vehicle, ViolationVehicleHolder savedVehicle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("UpdateViolaitonInfo");
                __delBase = __getDelegate(false);
                _ViolationImageStoreDel __del = (_ViolationImageStoreDel)__delBase;
                return __del.UpdateViolaitonInfo(vehicle, savedVehicle, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __UpdateViolaitonInfo_name = "UpdateViolaitonInfo";

    public Ice.AsyncResult begin_UpdateViolaitonInfo(ViolationVehicle vehicle)
    {
        return begin_UpdateViolaitonInfo(vehicle, null, false, null);
    }

    public Ice.AsyncResult begin_UpdateViolaitonInfo(ViolationVehicle vehicle, java.util.Map<String, String> __ctx)
    {
        return begin_UpdateViolaitonInfo(vehicle, __ctx, true, null);
    }

    public Ice.AsyncResult begin_UpdateViolaitonInfo(ViolationVehicle vehicle, Ice.Callback __cb)
    {
        return begin_UpdateViolaitonInfo(vehicle, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateViolaitonInfo(ViolationVehicle vehicle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateViolaitonInfo(vehicle, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_UpdateViolaitonInfo(ViolationVehicle vehicle, Callback_ViolationImageStore_UpdateViolaitonInfo __cb)
    {
        return begin_UpdateViolaitonInfo(vehicle, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateViolaitonInfo(ViolationVehicle vehicle, java.util.Map<String, String> __ctx, Callback_ViolationImageStore_UpdateViolaitonInfo __cb)
    {
        return begin_UpdateViolaitonInfo(vehicle, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_UpdateViolaitonInfo(ViolationVehicle vehicle, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UpdateViolaitonInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __UpdateViolaitonInfo_name, __cb);
        try
        {
            __result.__prepare(__UpdateViolaitonInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vehicle.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_UpdateViolaitonInfo(ViolationVehicleHolder savedVehicle, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __UpdateViolaitonInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        savedVehicle.value = new ViolationVehicle();
        savedVehicle.value.__read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    UpdateViolaitonInfo_async(AMI_ViolationImageStore_UpdateViolaitonInfo __cb, ViolationVehicle vehicle)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__UpdateViolaitonInfo_name);
            __r = begin_UpdateViolaitonInfo(vehicle, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __UpdateViolaitonInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    UpdateViolaitonInfo_async(AMI_ViolationImageStore_UpdateViolaitonInfo __cb, ViolationVehicle vehicle, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__UpdateViolaitonInfo_name);
            __r = begin_UpdateViolaitonInfo(vehicle, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __UpdateViolaitonInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static ViolationImageStorePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ViolationImageStorePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ViolationImageStorePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::LDTSSInterface::ViolationImageStore"))
                {
                    ViolationImageStorePrxHelper __h = new ViolationImageStorePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ViolationImageStorePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ViolationImageStorePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ViolationImageStorePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::LDTSSInterface::ViolationImageStore", __ctx))
                {
                    ViolationImageStorePrxHelper __h = new ViolationImageStorePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ViolationImageStorePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ViolationImageStorePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::LDTSSInterface::ViolationImageStore"))
                {
                    ViolationImageStorePrxHelper __h = new ViolationImageStorePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ViolationImageStorePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ViolationImageStorePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::LDTSSInterface::ViolationImageStore", __ctx))
                {
                    ViolationImageStorePrxHelper __h = new ViolationImageStorePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ViolationImageStorePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ViolationImageStorePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ViolationImageStorePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ViolationImageStorePrxHelper __h = new ViolationImageStorePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ViolationImageStorePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ViolationImageStorePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ViolationImageStorePrxHelper __h = new ViolationImageStorePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ViolationImageStoreDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ViolationImageStoreDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ViolationImageStorePrx v)
    {
        __os.writeProxy(v);
    }

    public static ViolationImageStorePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ViolationImageStorePrxHelper result = new ViolationImageStorePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
