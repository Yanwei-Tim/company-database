// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.imageQuery.ice.generated;

// <auto-generated>
//
// Generated from file `Base.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public class ViolationVehicle implements java.lang.Cloneable, java.io.Serializable
{
    public String deviceNo;

    public String snapNbr;

    public String roadCode;

    public String driveDirection;

    public int lane;

    public String plateNbr;

    public String plateType;

    public String captureTime;

    public float vehicleSpeed;

    public String plateColor;

    public String vehicleType;

    public String[] violationBehaviors;

    public SpeedLimit[] roadSpeedLimits;

    public String redlightTime;

    public String gpsLocationInfo;

    public java.util.Map<java.lang.String, java.lang.String> extendedProperties;

    public VehicleImageDescription[] imageDescriptions;

    public ViolationVehicle()
    {
    }

    public ViolationVehicle(String deviceNo, String snapNbr, String roadCode, String driveDirection, int lane, String plateNbr, String plateType, String captureTime, float vehicleSpeed, String plateColor, String vehicleType, String[] violationBehaviors, SpeedLimit[] roadSpeedLimits, String redlightTime, String gpsLocationInfo, java.util.Map<java.lang.String, java.lang.String> extendedProperties, VehicleImageDescription[] imageDescriptions)
    {
        this.deviceNo = deviceNo;
        this.snapNbr = snapNbr;
        this.roadCode = roadCode;
        this.driveDirection = driveDirection;
        this.lane = lane;
        this.plateNbr = plateNbr;
        this.plateType = plateType;
        this.captureTime = captureTime;
        this.vehicleSpeed = vehicleSpeed;
        this.plateColor = plateColor;
        this.vehicleType = vehicleType;
        this.violationBehaviors = violationBehaviors;
        this.roadSpeedLimits = roadSpeedLimits;
        this.redlightTime = redlightTime;
        this.gpsLocationInfo = gpsLocationInfo;
        this.extendedProperties = extendedProperties;
        this.imageDescriptions = imageDescriptions;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ViolationVehicle _r = null;
        try
        {
            _r = (ViolationVehicle)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(deviceNo != _r.deviceNo && deviceNo != null && !deviceNo.equals(_r.deviceNo))
            {
                return false;
            }
            if(snapNbr != _r.snapNbr && snapNbr != null && !snapNbr.equals(_r.snapNbr))
            {
                return false;
            }
            if(roadCode != _r.roadCode && roadCode != null && !roadCode.equals(_r.roadCode))
            {
                return false;
            }
            if(driveDirection != _r.driveDirection && driveDirection != null && !driveDirection.equals(_r.driveDirection))
            {
                return false;
            }
            if(lane != _r.lane)
            {
                return false;
            }
            if(plateNbr != _r.plateNbr && plateNbr != null && !plateNbr.equals(_r.plateNbr))
            {
                return false;
            }
            if(plateType != _r.plateType && plateType != null && !plateType.equals(_r.plateType))
            {
                return false;
            }
            if(captureTime != _r.captureTime && captureTime != null && !captureTime.equals(_r.captureTime))
            {
                return false;
            }
            if(vehicleSpeed != _r.vehicleSpeed)
            {
                return false;
            }
            if(plateColor != _r.plateColor && plateColor != null && !plateColor.equals(_r.plateColor))
            {
                return false;
            }
            if(vehicleType != _r.vehicleType && vehicleType != null && !vehicleType.equals(_r.vehicleType))
            {
                return false;
            }
            if(!java.util.Arrays.equals(violationBehaviors, _r.violationBehaviors))
            {
                return false;
            }
            if(!java.util.Arrays.equals(roadSpeedLimits, _r.roadSpeedLimits))
            {
                return false;
            }
            if(redlightTime != _r.redlightTime && redlightTime != null && !redlightTime.equals(_r.redlightTime))
            {
                return false;
            }
            if(gpsLocationInfo != _r.gpsLocationInfo && gpsLocationInfo != null && !gpsLocationInfo.equals(_r.gpsLocationInfo))
            {
                return false;
            }
            if(extendedProperties != _r.extendedProperties && extendedProperties != null && !extendedProperties.equals(_r.extendedProperties))
            {
                return false;
            }
            if(!java.util.Arrays.equals(imageDescriptions, _r.imageDescriptions))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(deviceNo != null)
        {
            __h = 5 * __h + deviceNo.hashCode();
        }
        if(snapNbr != null)
        {
            __h = 5 * __h + snapNbr.hashCode();
        }
        if(roadCode != null)
        {
            __h = 5 * __h + roadCode.hashCode();
        }
        if(driveDirection != null)
        {
            __h = 5 * __h + driveDirection.hashCode();
        }
        __h = 5 * __h + lane;
        if(plateNbr != null)
        {
            __h = 5 * __h + plateNbr.hashCode();
        }
        if(plateType != null)
        {
            __h = 5 * __h + plateType.hashCode();
        }
        if(captureTime != null)
        {
            __h = 5 * __h + captureTime.hashCode();
        }
        __h = 5 * __h + java.lang.Float.floatToIntBits(vehicleSpeed);
        if(plateColor != null)
        {
            __h = 5 * __h + plateColor.hashCode();
        }
        if(vehicleType != null)
        {
            __h = 5 * __h + vehicleType.hashCode();
        }
        if(violationBehaviors != null)
        {
            for(int __i0 = 0; __i0 < violationBehaviors.length; __i0++)
            {
                if(violationBehaviors[__i0] != null)
                {
                    __h = 5 * __h + violationBehaviors[__i0].hashCode();
                }
            }
        }
        if(roadSpeedLimits != null)
        {
            for(int __i1 = 0; __i1 < roadSpeedLimits.length; __i1++)
            {
                if(roadSpeedLimits[__i1] != null)
                {
                    __h = 5 * __h + roadSpeedLimits[__i1].hashCode();
                }
            }
        }
        if(redlightTime != null)
        {
            __h = 5 * __h + redlightTime.hashCode();
        }
        if(gpsLocationInfo != null)
        {
            __h = 5 * __h + gpsLocationInfo.hashCode();
        }
        if(extendedProperties != null)
        {
            __h = 5 * __h + extendedProperties.hashCode();
        }
        if(imageDescriptions != null)
        {
            for(int __i2 = 0; __i2 < imageDescriptions.length; __i2++)
            {
                if(imageDescriptions[__i2] != null)
                {
                    __h = 5 * __h + imageDescriptions[__i2].hashCode();
                }
            }
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(deviceNo);
        __os.writeString(snapNbr);
        __os.writeString(roadCode);
        __os.writeString(driveDirection);
        __os.writeInt(lane);
        __os.writeString(plateNbr);
        __os.writeString(plateType);
        __os.writeString(captureTime);
        __os.writeFloat(vehicleSpeed);
        __os.writeString(plateColor);
        __os.writeString(vehicleType);
        Ice.StringSeqHelper.write(__os, violationBehaviors);
        SpeedLimitSeqHelper.write(__os, roadSpeedLimits);
        __os.writeString(redlightTime);
        __os.writeString(gpsLocationInfo);
        StringStringDictHelper.write(__os, extendedProperties);
        VehicleImageDescriptionSeqHelper.write(__os, imageDescriptions);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        deviceNo = __is.readString();
        snapNbr = __is.readString();
        roadCode = __is.readString();
        driveDirection = __is.readString();
        lane = __is.readInt();
        plateNbr = __is.readString();
        plateType = __is.readString();
        captureTime = __is.readString();
        vehicleSpeed = __is.readFloat();
        plateColor = __is.readString();
        vehicleType = __is.readString();
        violationBehaviors = Ice.StringSeqHelper.read(__is);
        roadSpeedLimits = SpeedLimitSeqHelper.read(__is);
        redlightTime = __is.readString();
        gpsLocationInfo = __is.readString();
        extendedProperties = StringStringDictHelper.read(__is);
        imageDescriptions = VehicleImageDescriptionSeqHelper.read(__is);
    }
}
