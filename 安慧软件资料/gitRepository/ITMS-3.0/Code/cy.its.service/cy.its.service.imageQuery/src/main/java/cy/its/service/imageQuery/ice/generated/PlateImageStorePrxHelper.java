// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.imageQuery.ice.generated;

// <auto-generated>
//
// Generated from file `PlateImageStore.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class PlateImageStorePrxHelper extends Ice.ObjectPrxHelperBase implements PlateImageStorePrx
{
    public int
    CountVehicleByTime(String startTime, String endTime, String deviceNo)
    {
        return CountVehicleByTime(startTime, endTime, deviceNo, null, false);
    }

    public int
    CountVehicleByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx)
    {
        return CountVehicleByTime(startTime, endTime, deviceNo, __ctx, true);
    }

    private int
    CountVehicleByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("CountVehicleByTime");
                __delBase = __getDelegate(false);
                _PlateImageStoreDel __del = (_PlateImageStoreDel)__delBase;
                return __del.CountVehicleByTime(startTime, endTime, deviceNo, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __CountVehicleByTime_name = "CountVehicleByTime";

    public Ice.AsyncResult begin_CountVehicleByTime(String startTime, String endTime, String deviceNo)
    {
        return begin_CountVehicleByTime(startTime, endTime, deviceNo, null, false, null);
    }

    public Ice.AsyncResult begin_CountVehicleByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx)
    {
        return begin_CountVehicleByTime(startTime, endTime, deviceNo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_CountVehicleByTime(String startTime, String endTime, String deviceNo, Ice.Callback __cb)
    {
        return begin_CountVehicleByTime(startTime, endTime, deviceNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_CountVehicleByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_CountVehicleByTime(startTime, endTime, deviceNo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_CountVehicleByTime(String startTime, String endTime, String deviceNo, Callback_PlateImageStore_CountVehicleByTime __cb)
    {
        return begin_CountVehicleByTime(startTime, endTime, deviceNo, null, false, __cb);
    }

    public Ice.AsyncResult begin_CountVehicleByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, Callback_PlateImageStore_CountVehicleByTime __cb)
    {
        return begin_CountVehicleByTime(startTime, endTime, deviceNo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_CountVehicleByTime(String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__CountVehicleByTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __CountVehicleByTime_name, __cb);
        try
        {
            __result.__prepare(__CountVehicleByTime_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(startTime);
            __os.writeString(endTime);
            __os.writeString(deviceNo);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_CountVehicleByTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __CountVehicleByTime_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    CountVehicleByTime_async(AMI_PlateImageStore_CountVehicleByTime __cb, String startTime, String endTime, String deviceNo)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__CountVehicleByTime_name);
            __r = begin_CountVehicleByTime(startTime, endTime, deviceNo, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __CountVehicleByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    CountVehicleByTime_async(AMI_PlateImageStore_CountVehicleByTime __cb, String startTime, String endTime, String deviceNo, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__CountVehicleByTime_name);
            __r = begin_CountVehicleByTime(startTime, endTime, deviceNo, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __CountVehicleByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public PassingVehicle[]
    QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex)
    {
        return QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false);
    }

    public PassingVehicle[]
    QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx)
    {
        return QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true);
    }

    private PassingVehicle[]
    QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("QueryVehicleByTime");
                __delBase = __getDelegate(false);
                _PlateImageStoreDel __del = (_PlateImageStoreDel)__delBase;
                return __del.QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __QueryVehicleByTime_name = "QueryVehicleByTime";

    public Ice.AsyncResult begin_QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex)
    {
        return begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, null);
    }

    public Ice.AsyncResult begin_QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx)
    {
        return begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, null);
    }

    public Ice.AsyncResult begin_QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, Ice.Callback __cb)
    {
        return begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, __cb);
    }

    public Ice.AsyncResult begin_QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, Callback_PlateImageStore_QueryVehicleByTime __cb)
    {
        return begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, __cb);
    }

    public Ice.AsyncResult begin_QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, Callback_PlateImageStore_QueryVehicleByTime __cb)
    {
        return begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_QueryVehicleByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__QueryVehicleByTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __QueryVehicleByTime_name, __cb);
        try
        {
            __result.__prepare(__QueryVehicleByTime_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(startTime);
            __os.writeString(endTime);
            __os.writeString(deviceNo);
            __os.writeInt(pageSize);
            __os.writeInt(pageIndex);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PassingVehicle[] end_QueryVehicleByTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __QueryVehicleByTime_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        PassingVehicle[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = PassingVehicleSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    QueryVehicleByTime_async(AMI_PlateImageStore_QueryVehicleByTime __cb, String startTime, String endTime, String deviceNo, int pageSize, int pageIndex)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__QueryVehicleByTime_name);
            __r = begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __QueryVehicleByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    QueryVehicleByTime_async(AMI_PlateImageStore_QueryVehicleByTime __cb, String startTime, String endTime, String deviceNo, int pageSize, int pageIndex, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__QueryVehicleByTime_name);
            __r = begin_QueryVehicleByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __QueryVehicleByTime_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public VehicleImage[]
    RetrieveVehicleImages(String deviceNo, String snapNbr)
    {
        return RetrieveVehicleImages(deviceNo, snapNbr, null, false);
    }

    public VehicleImage[]
    RetrieveVehicleImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return RetrieveVehicleImages(deviceNo, snapNbr, __ctx, true);
    }

    private VehicleImage[]
    RetrieveVehicleImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("RetrieveVehicleImages");
                __delBase = __getDelegate(false);
                _PlateImageStoreDel __del = (_PlateImageStoreDel)__delBase;
                return __del.RetrieveVehicleImages(deviceNo, snapNbr, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __RetrieveVehicleImages_name = "RetrieveVehicleImages";

    public Ice.AsyncResult begin_RetrieveVehicleImages(String deviceNo, String snapNbr)
    {
        return begin_RetrieveVehicleImages(deviceNo, snapNbr, null, false, null);
    }

    public Ice.AsyncResult begin_RetrieveVehicleImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return begin_RetrieveVehicleImages(deviceNo, snapNbr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_RetrieveVehicleImages(String deviceNo, String snapNbr, Ice.Callback __cb)
    {
        return begin_RetrieveVehicleImages(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveVehicleImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RetrieveVehicleImages(deviceNo, snapNbr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_RetrieveVehicleImages(String deviceNo, String snapNbr, Callback_PlateImageStore_RetrieveVehicleImages __cb)
    {
        return begin_RetrieveVehicleImages(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveVehicleImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Callback_PlateImageStore_RetrieveVehicleImages __cb)
    {
        return begin_RetrieveVehicleImages(deviceNo, snapNbr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_RetrieveVehicleImages(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RetrieveVehicleImages_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __RetrieveVehicleImages_name, __cb);
        try
        {
            __result.__prepare(__RetrieveVehicleImages_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(deviceNo);
            __os.writeString(snapNbr);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public VehicleImage[] end_RetrieveVehicleImages(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __RetrieveVehicleImages_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        VehicleImage[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = VehicleImageSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    RetrieveVehicleImages_async(AMI_PlateImageStore_RetrieveVehicleImages __cb, String deviceNo, String snapNbr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveVehicleImages_name);
            __r = begin_RetrieveVehicleImages(deviceNo, snapNbr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveVehicleImages_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    RetrieveVehicleImages_async(AMI_PlateImageStore_RetrieveVehicleImages __cb, String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveVehicleImages_name);
            __r = begin_RetrieveVehicleImages(deviceNo, snapNbr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveVehicleImages_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public PassingVehicle[]
    RetrieveVehicleInfo(String deviceNo, String snapNbr)
    {
        return RetrieveVehicleInfo(deviceNo, snapNbr, null, false);
    }

    public PassingVehicle[]
    RetrieveVehicleInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return RetrieveVehicleInfo(deviceNo, snapNbr, __ctx, true);
    }

    private PassingVehicle[]
    RetrieveVehicleInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("RetrieveVehicleInfo");
                __delBase = __getDelegate(false);
                _PlateImageStoreDel __del = (_PlateImageStoreDel)__delBase;
                return __del.RetrieveVehicleInfo(deviceNo, snapNbr, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __RetrieveVehicleInfo_name = "RetrieveVehicleInfo";

    public Ice.AsyncResult begin_RetrieveVehicleInfo(String deviceNo, String snapNbr)
    {
        return begin_RetrieveVehicleInfo(deviceNo, snapNbr, null, false, null);
    }

    public Ice.AsyncResult begin_RetrieveVehicleInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        return begin_RetrieveVehicleInfo(deviceNo, snapNbr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_RetrieveVehicleInfo(String deviceNo, String snapNbr, Ice.Callback __cb)
    {
        return begin_RetrieveVehicleInfo(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveVehicleInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RetrieveVehicleInfo(deviceNo, snapNbr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_RetrieveVehicleInfo(String deviceNo, String snapNbr, Callback_PlateImageStore_RetrieveVehicleInfo __cb)
    {
        return begin_RetrieveVehicleInfo(deviceNo, snapNbr, null, false, __cb);
    }

    public Ice.AsyncResult begin_RetrieveVehicleInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, Callback_PlateImageStore_RetrieveVehicleInfo __cb)
    {
        return begin_RetrieveVehicleInfo(deviceNo, snapNbr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_RetrieveVehicleInfo(String deviceNo, String snapNbr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RetrieveVehicleInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __RetrieveVehicleInfo_name, __cb);
        try
        {
            __result.__prepare(__RetrieveVehicleInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(deviceNo);
            __os.writeString(snapNbr);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PassingVehicle[] end_RetrieveVehicleInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __RetrieveVehicleInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        PassingVehicle[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = PassingVehicleSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    RetrieveVehicleInfo_async(AMI_PlateImageStore_RetrieveVehicleInfo __cb, String deviceNo, String snapNbr)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveVehicleInfo_name);
            __r = begin_RetrieveVehicleInfo(deviceNo, snapNbr, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveVehicleInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    RetrieveVehicleInfo_async(AMI_PlateImageStore_RetrieveVehicleInfo __cb, String deviceNo, String snapNbr, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__RetrieveVehicleInfo_name);
            __r = begin_RetrieveVehicleInfo(deviceNo, snapNbr, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __RetrieveVehicleInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, PassingVehicleHolder savedVehicle)
    {
        return StoreVehicle(vehicle, vehicleImages, savedVehicle, null, false);
    }

    public boolean
    StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, PassingVehicleHolder savedVehicle, java.util.Map<String, String> __ctx)
    {
        return StoreVehicle(vehicle, vehicleImages, savedVehicle, __ctx, true);
    }

    private boolean
    StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, PassingVehicleHolder savedVehicle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("StoreVehicle");
                __delBase = __getDelegate(false);
                _PlateImageStoreDel __del = (_PlateImageStoreDel)__delBase;
                return __del.StoreVehicle(vehicle, vehicleImages, savedVehicle, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __StoreVehicle_name = "StoreVehicle";

    public Ice.AsyncResult begin_StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages)
    {
        return begin_StoreVehicle(vehicle, vehicleImages, null, false, null);
    }

    public Ice.AsyncResult begin_StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx)
    {
        return begin_StoreVehicle(vehicle, vehicleImages, __ctx, true, null);
    }

    public Ice.AsyncResult begin_StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, Ice.Callback __cb)
    {
        return begin_StoreVehicle(vehicle, vehicleImages, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_StoreVehicle(vehicle, vehicleImages, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, Callback_PlateImageStore_StoreVehicle __cb)
    {
        return begin_StoreVehicle(vehicle, vehicleImages, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx, Callback_PlateImageStore_StoreVehicle __cb)
    {
        return begin_StoreVehicle(vehicle, vehicleImages, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_StoreVehicle(PassingVehicle vehicle, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__StoreVehicle_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __StoreVehicle_name, __cb);
        try
        {
            __result.__prepare(__StoreVehicle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vehicle.__write(__os);
            VehicleImageSeqHelper.write(__os, vehicleImages);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_StoreVehicle(PassingVehicleHolder savedVehicle, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __StoreVehicle_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        savedVehicle.value = new PassingVehicle();
        savedVehicle.value.__read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    StoreVehicle_async(AMI_PlateImageStore_StoreVehicle __cb, PassingVehicle vehicle, VehicleImage[] vehicleImages)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreVehicle_name);
            __r = begin_StoreVehicle(vehicle, vehicleImages, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreVehicle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreVehicle_async(AMI_PlateImageStore_StoreVehicle __cb, PassingVehicle vehicle, VehicleImage[] vehicleImages, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreVehicle_name);
            __r = begin_StoreVehicle(vehicle, vehicleImages, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreVehicle_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreVehicle2(PassingVehicle vehicle, byte[] imageData, PassingVehicleHolder savedVehicle)
    {
        return StoreVehicle2(vehicle, imageData, savedVehicle, null, false);
    }

    public boolean
    StoreVehicle2(PassingVehicle vehicle, byte[] imageData, PassingVehicleHolder savedVehicle, java.util.Map<String, String> __ctx)
    {
        return StoreVehicle2(vehicle, imageData, savedVehicle, __ctx, true);
    }

    private boolean
    StoreVehicle2(PassingVehicle vehicle, byte[] imageData, PassingVehicleHolder savedVehicle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("StoreVehicle2");
                __delBase = __getDelegate(false);
                _PlateImageStoreDel __del = (_PlateImageStoreDel)__delBase;
                return __del.StoreVehicle2(vehicle, imageData, savedVehicle, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __StoreVehicle2_name = "StoreVehicle2";

    public Ice.AsyncResult begin_StoreVehicle2(PassingVehicle vehicle, byte[] imageData)
    {
        return begin_StoreVehicle2(vehicle, imageData, null, false, null);
    }

    public Ice.AsyncResult begin_StoreVehicle2(PassingVehicle vehicle, byte[] imageData, java.util.Map<String, String> __ctx)
    {
        return begin_StoreVehicle2(vehicle, imageData, __ctx, true, null);
    }

    public Ice.AsyncResult begin_StoreVehicle2(PassingVehicle vehicle, byte[] imageData, Ice.Callback __cb)
    {
        return begin_StoreVehicle2(vehicle, imageData, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreVehicle2(PassingVehicle vehicle, byte[] imageData, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_StoreVehicle2(vehicle, imageData, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_StoreVehicle2(PassingVehicle vehicle, byte[] imageData, Callback_PlateImageStore_StoreVehicle2 __cb)
    {
        return begin_StoreVehicle2(vehicle, imageData, null, false, __cb);
    }

    public Ice.AsyncResult begin_StoreVehicle2(PassingVehicle vehicle, byte[] imageData, java.util.Map<String, String> __ctx, Callback_PlateImageStore_StoreVehicle2 __cb)
    {
        return begin_StoreVehicle2(vehicle, imageData, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_StoreVehicle2(PassingVehicle vehicle, byte[] imageData, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__StoreVehicle2_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __StoreVehicle2_name, __cb);
        try
        {
            __result.__prepare(__StoreVehicle2_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vehicle.__write(__os);
            Ice.ByteSeqHelper.write(__os, imageData);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_StoreVehicle2(PassingVehicleHolder savedVehicle, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __StoreVehicle2_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        savedVehicle.value = new PassingVehicle();
        savedVehicle.value.__read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    StoreVehicle2_async(AMI_PlateImageStore_StoreVehicle2 __cb, PassingVehicle vehicle, byte[] imageData)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreVehicle2_name);
            __r = begin_StoreVehicle2(vehicle, imageData, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreVehicle2_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    StoreVehicle2_async(AMI_PlateImageStore_StoreVehicle2 __cb, PassingVehicle vehicle, byte[] imageData, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__StoreVehicle2_name);
            __r = begin_StoreVehicle2(vehicle, imageData, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __StoreVehicle2_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    UpdateVehicleInfo(PassingVehicle vehicle, PassingVehicleHolder savedVehicle)
    {
        return UpdateVehicleInfo(vehicle, savedVehicle, null, false);
    }

    public boolean
    UpdateVehicleInfo(PassingVehicle vehicle, PassingVehicleHolder savedVehicle, java.util.Map<String, String> __ctx)
    {
        return UpdateVehicleInfo(vehicle, savedVehicle, __ctx, true);
    }

    private boolean
    UpdateVehicleInfo(PassingVehicle vehicle, PassingVehicleHolder savedVehicle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("UpdateVehicleInfo");
                __delBase = __getDelegate(false);
                _PlateImageStoreDel __del = (_PlateImageStoreDel)__delBase;
                return __del.UpdateVehicleInfo(vehicle, savedVehicle, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __UpdateVehicleInfo_name = "UpdateVehicleInfo";

    public Ice.AsyncResult begin_UpdateVehicleInfo(PassingVehicle vehicle)
    {
        return begin_UpdateVehicleInfo(vehicle, null, false, null);
    }

    public Ice.AsyncResult begin_UpdateVehicleInfo(PassingVehicle vehicle, java.util.Map<String, String> __ctx)
    {
        return begin_UpdateVehicleInfo(vehicle, __ctx, true, null);
    }

    public Ice.AsyncResult begin_UpdateVehicleInfo(PassingVehicle vehicle, Ice.Callback __cb)
    {
        return begin_UpdateVehicleInfo(vehicle, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateVehicleInfo(PassingVehicle vehicle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateVehicleInfo(vehicle, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_UpdateVehicleInfo(PassingVehicle vehicle, Callback_PlateImageStore_UpdateVehicleInfo __cb)
    {
        return begin_UpdateVehicleInfo(vehicle, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateVehicleInfo(PassingVehicle vehicle, java.util.Map<String, String> __ctx, Callback_PlateImageStore_UpdateVehicleInfo __cb)
    {
        return begin_UpdateVehicleInfo(vehicle, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_UpdateVehicleInfo(PassingVehicle vehicle, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UpdateVehicleInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __UpdateVehicleInfo_name, __cb);
        try
        {
            __result.__prepare(__UpdateVehicleInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            vehicle.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_UpdateVehicleInfo(PassingVehicleHolder savedVehicle, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __UpdateVehicleInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        savedVehicle.value = new PassingVehicle();
        savedVehicle.value.__read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    UpdateVehicleInfo_async(AMI_PlateImageStore_UpdateVehicleInfo __cb, PassingVehicle vehicle)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__UpdateVehicleInfo_name);
            __r = begin_UpdateVehicleInfo(vehicle, null, false, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __UpdateVehicleInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public boolean
    UpdateVehicleInfo_async(AMI_PlateImageStore_UpdateVehicleInfo __cb, PassingVehicle vehicle, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r;
        try
        {
            __checkTwowayOnly(__UpdateVehicleInfo_name);
            __r = begin_UpdateVehicleInfo(vehicle, __ctx, true, __cb);
        }
        catch(Ice.TwowayOnlyException ex)
        {
            __r = new IceInternal.OutgoingAsync(this, __UpdateVehicleInfo_name, __cb);
            __r.__exceptionAsync(ex);
        }
        return __r.sentSynchronously();
    }

    public static PlateImageStorePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        PlateImageStorePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PlateImageStorePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::LDTSSInterface::PlateImageStore"))
                {
                    PlateImageStorePrxHelper __h = new PlateImageStorePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PlateImageStorePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PlateImageStorePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PlateImageStorePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::LDTSSInterface::PlateImageStore", __ctx))
                {
                    PlateImageStorePrxHelper __h = new PlateImageStorePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PlateImageStorePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PlateImageStorePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::LDTSSInterface::PlateImageStore"))
                {
                    PlateImageStorePrxHelper __h = new PlateImageStorePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PlateImageStorePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PlateImageStorePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::LDTSSInterface::PlateImageStore", __ctx))
                {
                    PlateImageStorePrxHelper __h = new PlateImageStorePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PlateImageStorePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        PlateImageStorePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PlateImageStorePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                PlateImageStorePrxHelper __h = new PlateImageStorePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PlateImageStorePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PlateImageStorePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PlateImageStorePrxHelper __h = new PlateImageStorePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _PlateImageStoreDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _PlateImageStoreDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, PlateImageStorePrx v)
    {
        __os.writeProxy(v);
    }

    public static PlateImageStorePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PlateImageStorePrxHelper result = new PlateImageStorePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
