// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.imageQuery.ice.generated;

// <auto-generated>
//
// Generated from file `ViolationImageStore.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public abstract class _ViolationImageStoreDisp extends Ice.ObjectImpl implements ViolationImageStore
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::LDTSSInterface::ViolationImageStore"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    public final int
    CountViolationByTime(String startTime, String endTime, String deviceNo)
    {
        return CountViolationByTime(startTime, endTime, deviceNo, null);
    }

    public final ViolationVehicle[]
    QueryViolationByTime(String startTime, String endTime, String deviceNo, int pageSize, int pageIndex)
    {
        return QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, null);
    }

    public final VehicleImage[]
    RetrieveViolationImages(String deviceNo, String snapNbr)
    {
        return RetrieveViolationImages(deviceNo, snapNbr, null);
    }

    public final ViolationVehicle[]
    RetrieveViolationInfo(String deviceNo, String snapNbr)
    {
        return RetrieveViolationInfo(deviceNo, snapNbr, null);
    }

    public final VehicleImage[]
    RetrieveViolationMedia(String deviceNo, String snapNbr)
    {
        return RetrieveViolationMedia(deviceNo, snapNbr, null);
    }

    public final void
    StoreViolation_async(AMD_ViolationImageStore_StoreViolation __cb, ViolationVehicle violation, VehicleImage[] vehicleImages)
    {
        StoreViolation_async(__cb, violation, vehicleImages, null);
    }

    public final void
    StoreViolation2_async(AMD_ViolationImageStore_StoreViolation2 __cb, ViolationVehicle violation, byte[] imageData)
    {
        StoreViolation2_async(__cb, violation, imageData, null);
    }

    public final boolean
    UpdateViolaitonInfo(ViolationVehicle vehicle, ViolationVehicleHolder savedVehicle)
    {
        return UpdateViolaitonInfo(vehicle, savedVehicle, null);
    }

    public static Ice.DispatchStatus
    ___StoreViolation(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ViolationVehicle violation;
        violation = new ViolationVehicle();
        violation.__read(__is);
        VehicleImage[] vehicleImages;
        vehicleImages = VehicleImageSeqHelper.read(__is);
        __is.endReadEncaps();
        AMD_ViolationImageStore_StoreViolation __cb = new _AMD_ViolationImageStore_StoreViolation(__inS);
        try
        {
            __obj.StoreViolation_async(__cb, violation, vehicleImages, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___StoreViolation2(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ViolationVehicle violation;
        violation = new ViolationVehicle();
        violation.__read(__is);
        byte[] imageData;
        imageData = Ice.ByteSeqHelper.read(__is);
        __is.endReadEncaps();
        AMD_ViolationImageStore_StoreViolation2 __cb = new _AMD_ViolationImageStore_StoreViolation2(__inS);
        try
        {
            __obj.StoreViolation2_async(__cb, violation, imageData, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___RetrieveViolationInfo(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String deviceNo;
        deviceNo = __is.readString();
        String snapNbr;
        snapNbr = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        ViolationVehicle[] __ret = __obj.RetrieveViolationInfo(deviceNo, snapNbr, __current);
        ViolationVehicleSeqHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___RetrieveViolationImages(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String deviceNo;
        deviceNo = __is.readString();
        String snapNbr;
        snapNbr = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        VehicleImage[] __ret = __obj.RetrieveViolationImages(deviceNo, snapNbr, __current);
        VehicleImageSeqHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___RetrieveViolationMedia(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String deviceNo;
        deviceNo = __is.readString();
        String snapNbr;
        snapNbr = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        VehicleImage[] __ret = __obj.RetrieveViolationMedia(deviceNo, snapNbr, __current);
        VehicleImageSeqHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___QueryViolationByTime(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String startTime;
        startTime = __is.readString();
        String endTime;
        endTime = __is.readString();
        String deviceNo;
        deviceNo = __is.readString();
        int pageSize;
        pageSize = __is.readInt();
        int pageIndex;
        pageIndex = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        ViolationVehicle[] __ret = __obj.QueryViolationByTime(startTime, endTime, deviceNo, pageSize, pageIndex, __current);
        ViolationVehicleSeqHelper.write(__os, __ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___CountViolationByTime(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String startTime;
        startTime = __is.readString();
        String endTime;
        endTime = __is.readString();
        String deviceNo;
        deviceNo = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        int __ret = __obj.CountViolationByTime(startTime, endTime, deviceNo, __current);
        __os.writeInt(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___UpdateViolaitonInfo(ViolationImageStore __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ViolationVehicle vehicle;
        vehicle = new ViolationVehicle();
        vehicle.__read(__is);
        __is.endReadEncaps();
        ViolationVehicleHolder savedVehicle = new ViolationVehicleHolder();
        IceInternal.BasicStream __os = __inS.os();
        boolean __ret = __obj.UpdateViolaitonInfo(vehicle, savedVehicle, __current);
        savedVehicle.value.__write(__os);
        __os.writeBool(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "CountViolationByTime",
        "QueryViolationByTime",
        "RetrieveViolationImages",
        "RetrieveViolationInfo",
        "RetrieveViolationMedia",
        "StoreViolation",
        "StoreViolation2",
        "UpdateViolaitonInfo",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___CountViolationByTime(this, in, __current);
            }
            case 1:
            {
                return ___QueryViolationByTime(this, in, __current);
            }
            case 2:
            {
                return ___RetrieveViolationImages(this, in, __current);
            }
            case 3:
            {
                return ___RetrieveViolationInfo(this, in, __current);
            }
            case 4:
            {
                return ___RetrieveViolationMedia(this, in, __current);
            }
            case 5:
            {
                return ___StoreViolation(this, in, __current);
            }
            case 6:
            {
                return ___StoreViolation2(this, in, __current);
            }
            case 7:
            {
                return ___UpdateViolaitonInfo(this, in, __current);
            }
            case 8:
            {
                return ___ice_id(this, in, __current);
            }
            case 9:
            {
                return ___ice_ids(this, in, __current);
            }
            case 10:
            {
                return ___ice_isA(this, in, __current);
            }
            case 11:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type LDTSSInterface::ViolationImageStore was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type LDTSSInterface::ViolationImageStore was not generated with stream support";
        throw ex;
    }
}
