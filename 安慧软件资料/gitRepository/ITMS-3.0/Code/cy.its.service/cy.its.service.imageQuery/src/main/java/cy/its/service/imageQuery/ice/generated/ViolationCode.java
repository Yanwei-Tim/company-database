// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cy.its.service.imageQuery.ice.generated;

// <auto-generated>
//
// Generated from file `Base.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public class ViolationCode implements java.lang.Cloneable, java.io.Serializable
{
    public int violationType;

    public ValueRange roadSpeedLimit;

    public int overSpeedPercent;

    public String code;

    public String violationDesc;

    public ViolationCode()
    {
    }

    public ViolationCode(int violationType, ValueRange roadSpeedLimit, int overSpeedPercent, String code, String violationDesc)
    {
        this.violationType = violationType;
        this.roadSpeedLimit = roadSpeedLimit;
        this.overSpeedPercent = overSpeedPercent;
        this.code = code;
        this.violationDesc = violationDesc;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ViolationCode _r = null;
        try
        {
            _r = (ViolationCode)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(violationType != _r.violationType)
            {
                return false;
            }
            if(roadSpeedLimit != _r.roadSpeedLimit && roadSpeedLimit != null && !roadSpeedLimit.equals(_r.roadSpeedLimit))
            {
                return false;
            }
            if(overSpeedPercent != _r.overSpeedPercent)
            {
                return false;
            }
            if(code != _r.code && code != null && !code.equals(_r.code))
            {
                return false;
            }
            if(violationDesc != _r.violationDesc && violationDesc != null && !violationDesc.equals(_r.violationDesc))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        __h = 5 * __h + violationType;
        if(roadSpeedLimit != null)
        {
            __h = 5 * __h + roadSpeedLimit.hashCode();
        }
        __h = 5 * __h + overSpeedPercent;
        if(code != null)
        {
            __h = 5 * __h + code.hashCode();
        }
        if(violationDesc != null)
        {
            __h = 5 * __h + violationDesc.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(violationType);
        roadSpeedLimit.__write(__os);
        __os.writeInt(overSpeedPercent);
        __os.writeString(code);
        __os.writeString(violationDesc);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        violationType = __is.readInt();
        roadSpeedLimit = new ValueRange();
        roadSpeedLimit.__read(__is);
        overSpeedPercent = __is.readInt();
        code = __is.readString();
        violationDesc = __is.readString();
    }
}
